{
  "raw": "package scoring\nimport (\n    \"fmt\"\n    \"job-seek/pkg/config\"\n    \"job-seek/pkg/request\"\n    \"sort\"\n    \"strings\"\n    \"github.com/k0kubun/pp/v3\"\n    \"github.com/lithammer/fuzzysearch/fuzzy\"\n    \"github.com/samber/lo\"\n)\nfunc ExampleScore() {\n    test := []string{\"javascript\", \"typescript\"}\n    matches := fuzzy.RankFindFold(\"java\", test)\n    sort.Sort(matches)\n    pp.Println(\"matches\", matches)\n}\nfunc ScorePostMatching(config *config.SearchConfig, context string) (int, []string) {\n    score := 0\n    contextToken := strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")\n    positiveMatch := []string{}\n    for _, keyword := range *config.SearchKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score += 2\n            } else if match.Distance <= 4 {\n                score += 1\n            }\n            positiveMatch = append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))\n        }\n    }\n    for _, keyword := range *config.IgnoreKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score -= 3\n            } else if match.Distance <= 4 {\n                score -= 2\n            }\n        }\n    }\n    // score += 1\n    return score, positiveMatch\n}\nfunc ScorePostMatchingKeyword(config *config.SearchConfig, context string) (fuzzy.Ranks, fuzzy.Ranks) {\n    // score := 0\n    contextToken := strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")\n    // positiveMatch := []string{}\n    posMatch := make(fuzzy.Ranks, 0)\n    negMatch := make(fuzzy.Ranks, 0)\n    for _, keyword := range *config.SearchKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        posMatch = append(posMatch, matched...)\n    }\n    posMatch = lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })\n    for _, keyword := range *config.IgnoreKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        negMatch = append(negMatch, matched...)\n    }\n    negMatch = lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })\n    return posMatch, negMatch\n}\nfunc scoringMatch(posMatch, negMatch fuzzy.Ranks, posFullScore, posPartScore, negFullScore, negPartScore int, ignoreRepeated bool) int {\n    score := 0\n    pMatch := posMatch\n    nMatch := negMatch\n    if ignoreRepeated {\n        pMatch = make(fuzzy.Ranks, 0)\n        keys := lo.KeyBy(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            pMatch = append(pMatch, item)\n        }\n        nMatch = make(fuzzy.Ranks, 0)\n        keys = lo.KeyBy(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            nMatch = append(nMatch, item)\n        }\n    }\n    for _, match := range pMatch {\n        if match.Distance == 0 {\n            score += posFullScore\n        } else if match.Distance <= 4 {\n            score += posPartScore\n        }\n    }\n    for _, match := range nMatch {\n        if match.Distance == 0 {\n            score -= negFullScore\n        } else if match.Distance <= 4 {\n            score -= negPartScore\n        }\n    }\n    return score\n}\nfunc CalculateMatchingScores(readConfig *config.SearchConfig, postDetail *request.SeekPostDetails) (int, []string) {\n    // positiveMatch := make(fuzzy.Ranks, 0)\n    // negativeMatch := make(fuzzy.Ranks, 0)\n    score := 0\n    // title weighting\n    positiveMatch, negativeMatch := ScorePostMatchingKeyword(readConfig, postDetail.PostTitle)\n    score += scoringMatch(positiveMatch, negativeMatch, 5, 2, 5, 2, false)\n    pMatch, nMatch := ScorePostMatchingKeyword(readConfig, postDetail.WorkType)\n    score += scoringMatch(pMatch, nMatch, 5, 2, 5, 1, false)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.Role)\n    score += scoringMatch(pMatch, nMatch, 5, 2, 5, 2, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.DebugText)\n    score += scoringMatch(pMatch, nMatch, 3, 2, 3, 2, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Description)\n    score += scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Specialties)\n    score += scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    debugText := make([]string, 0)\n    for _, match := range positiveMatch {\n        debugText = append(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }\n    for _, match := range negativeMatch {\n        debugText = append(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }\n    return score, debugText\n}\n    ",
  "expr": "(source_file (package_clause (package_identifier)) (import_declaration (import_spec_list (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)))) (function_declaration name: (identifier) parameters: (parameter_list) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value (literal_element (interpreted_string_literal)) (literal_element (interpreted_string_literal)))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier))))) (expression_statement (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier)))) (expression_statement (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier)))))) (function_declaration name: (identifier) parameters: (parameter_list (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (parameter_list (parameter_declaration type: (type_identifier)) (parameter_declaration type: (slice_type element: (type_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value)))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))))))) (comment) (return_statement (expression_list (identifier) (identifier))))) (function_declaration name: (identifier) parameters: (parameter_list (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (parameter_list (parameter_declaration type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration type: (qualified_type package: (package_identifier) name: (type_identifier)))) body: (block (comment) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))))) (comment) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))))) (return_statement (expression_list (identifier) (identifier))))) (function_declaration name: (identifier) parameters: (parameter_list (parameter_declaration name: (identifier) name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) name: (identifier) name: (identifier) name: (identifier) type: (type_identifier)) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (identifier))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (identifier))) (if_statement condition: (identifier) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))))) (return_statement (expression_list (identifier))))) (function_declaration name: (identifier) parameters: (parameter_list (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))) (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier))))) result: (parameter_list (parameter_declaration type: (type_identifier)) (parameter_declaration type: (slice_type element: (type_identifier)))) body: (block (comment) (comment) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal))) (comment) (short_var_declaration left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))))) (short_var_declaration left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (slice_type element: (type_identifier)) (int_literal))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))) (return_statement (expression_list (identifier) (identifier))))))",
  "kind": "source_file",
  "grammar": "source_file",
  "source_language": "Golang",
  "children": [
    {
      "raw": "package",
      "expr": "(\"package\")",
      "kind": "package",
      "grammar": "package",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "scoring",
      "expr": "(package_identifier)",
      "kind": "package_identifier",
      "grammar": "identifier",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "import",
      "expr": "(\"import\")",
      "kind": "import",
      "grammar": "import",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "(\n    \"fmt\"\n    \"job-seek/pkg/config\"\n    \"job-seek/pkg/request\"\n    \"sort\"\n    \"strings\"\n    \"github.com/k0kubun/pp/v3\"\n    \"github.com/lithammer/fuzzysearch/fuzzy\"\n    \"github.com/samber/lo\"\n)",
      "expr": "(import_spec_list (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)) (import_spec path: (interpreted_string_literal)))",
      "kind": "import_spec_list",
      "grammar": "import_spec_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"fmt\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"fmt\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"job-seek/pkg/config\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"job-seek/pkg/config\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"job-seek/pkg/request\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"job-seek/pkg/request\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"sort\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"sort\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"strings\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"strings\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"github.com/k0kubun/pp/v3\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"github.com/k0kubun/pp/v3\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"github.com/lithammer/fuzzysearch/fuzzy\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"github.com/lithammer/fuzzysearch/fuzzy\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "\"github.com/samber/lo\"",
          "expr": "(import_spec path: (interpreted_string_literal))",
          "kind": "import_spec",
          "grammar": "import_spec",
          "source_language": "Golang",
          "children": [
            {
              "raw": "\"github.com/samber/lo\"",
              "expr": "(interpreted_string_literal)",
              "kind": "interpreted_string_literal",
              "grammar": "interpreted_string_literal",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "\"",
                  "expr": "(\"\"\")",
                  "kind": "\"",
                  "grammar": "\"",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "func",
      "expr": "(\"func\")",
      "kind": "func",
      "grammar": "func",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "ExampleScore",
      "expr": "(identifier)",
      "kind": "identifier",
      "grammar": "identifier",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "()",
      "expr": "(parameter_list)",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "{\n    test := []string{\"javascript\", \"typescript\"}\n    matches := fuzzy.RankFindFold(\"java\", test)\n    sort.Sort(matches)\n    pp.Println(\"matches\", matches)\n}",
      "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value (literal_element (interpreted_string_literal)) (literal_element (interpreted_string_literal)))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier))))) (expression_statement (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier)))) (expression_statement (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier)))))",
      "kind": "block",
      "grammar": "block",
      "source_language": "Golang",
      "children": [
        {
          "raw": "{",
          "expr": "(\"{\")",
          "kind": "{",
          "grammar": "{",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "test := []string{\"javascript\", \"typescript\"}",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value (literal_element (interpreted_string_literal)) (literal_element (interpreted_string_literal))))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "test",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "test",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "[]string{\"javascript\", \"typescript\"}",
              "expr": "(expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value (literal_element (interpreted_string_literal)) (literal_element (interpreted_string_literal)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "[]string{\"javascript\", \"typescript\"}",
                  "expr": "(composite_literal type: (slice_type element: (type_identifier)) body: (literal_value (literal_element (interpreted_string_literal)) (literal_element (interpreted_string_literal))))",
                  "kind": "composite_literal",
                  "grammar": "composite_literal",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "[]string",
                      "expr": "(slice_type element: (type_identifier))",
                      "kind": "slice_type",
                      "grammar": "slice_type",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "[",
                          "expr": "(\"[\")",
                          "kind": "[",
                          "grammar": "[",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "]",
                          "expr": "(\"]\")",
                          "kind": "]",
                          "grammar": "]",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "string",
                          "expr": "(type_identifier)",
                          "kind": "type_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{\"javascript\", \"typescript\"}",
                      "expr": "(literal_value (literal_element (interpreted_string_literal)) (literal_element (interpreted_string_literal)))",
                      "kind": "literal_value",
                      "grammar": "literal_value",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "\"javascript\"",
                          "expr": "(literal_element (interpreted_string_literal))",
                          "kind": "literal_element",
                          "grammar": "literal_element",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "\"javascript\"",
                              "expr": "(interpreted_string_literal)",
                              "kind": "interpreted_string_literal",
                              "grammar": "interpreted_string_literal",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "\"",
                                  "expr": "(\"\"\")",
                                  "kind": "\"",
                                  "grammar": "\"",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "\"",
                                  "expr": "(\"\"\")",
                                  "kind": "\"",
                                  "grammar": "\"",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "\"typescript\"",
                          "expr": "(literal_element (interpreted_string_literal))",
                          "kind": "literal_element",
                          "grammar": "literal_element",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "\"typescript\"",
                              "expr": "(interpreted_string_literal)",
                              "kind": "interpreted_string_literal",
                              "grammar": "interpreted_string_literal",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "\"",
                                  "expr": "(\"\"\")",
                                  "kind": "\"",
                                  "grammar": "\"",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "\"",
                                  "expr": "(\"\"\")",
                                  "kind": "\"",
                                  "grammar": "\"",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "matches := fuzzy.RankFindFold(\"java\", test)",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier)))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "matches",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "matches",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "fuzzy.RankFindFold(\"java\", test)",
              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "fuzzy.RankFindFold(\"java\", test)",
                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "fuzzy.RankFindFold",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "fuzzy",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "RankFindFold",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "(\"java\", test)",
                      "expr": "(argument_list (interpreted_string_literal) (identifier))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "\"java\"",
                          "expr": "(interpreted_string_literal)",
                          "kind": "interpreted_string_literal",
                          "grammar": "interpreted_string_literal",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "\"",
                              "expr": "(\"\"\")",
                              "kind": "\"",
                              "grammar": "\"",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "\"",
                              "expr": "(\"\"\")",
                              "kind": "\"",
                              "grammar": "\"",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "test",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "sort.Sort(matches)",
          "expr": "(expression_statement (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier))))",
          "kind": "expression_statement",
          "grammar": "expression_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "sort.Sort(matches)",
              "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier)))",
              "kind": "call_expression",
              "grammar": "call_expression",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "sort.Sort",
                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                  "kind": "selector_expression",
                  "grammar": "selector_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "sort",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ".",
                      "expr": "(\".\")",
                      "kind": ".",
                      "grammar": ".",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "Sort",
                      "expr": "(field_identifier)",
                      "kind": "field_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "(matches)",
                  "expr": "(argument_list (identifier))",
                  "kind": "argument_list",
                  "grammar": "argument_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "(",
                      "expr": "(\"(\")",
                      "kind": "(",
                      "grammar": "(",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "matches",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ")",
                      "expr": "(\")\")",
                      "kind": ")",
                      "grammar": ")",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "pp.Println(\"matches\", matches)",
          "expr": "(expression_statement (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier))))",
          "kind": "expression_statement",
          "grammar": "expression_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "pp.Println(\"matches\", matches)",
              "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (identifier)))",
              "kind": "call_expression",
              "grammar": "call_expression",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "pp.Println",
                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                  "kind": "selector_expression",
                  "grammar": "selector_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "pp",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ".",
                      "expr": "(\".\")",
                      "kind": ".",
                      "grammar": ".",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "Println",
                      "expr": "(field_identifier)",
                      "kind": "field_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "(\"matches\", matches)",
                  "expr": "(argument_list (interpreted_string_literal) (identifier))",
                  "kind": "argument_list",
                  "grammar": "argument_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "(",
                      "expr": "(\"(\")",
                      "kind": "(",
                      "grammar": "(",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "\"matches\"",
                      "expr": "(interpreted_string_literal)",
                      "kind": "interpreted_string_literal",
                      "grammar": "interpreted_string_literal",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "\"",
                          "expr": "(\"\"\")",
                          "kind": "\"",
                          "grammar": "\"",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "\"",
                          "expr": "(\"\"\")",
                          "kind": "\"",
                          "grammar": "\"",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "matches",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ")",
                      "expr": "(\")\")",
                      "kind": ")",
                      "grammar": ")",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "}",
          "expr": "(\"}\")",
          "kind": "}",
          "grammar": "}",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "func",
      "expr": "(\"func\")",
      "kind": "func",
      "grammar": "func",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "ScorePostMatching",
      "expr": "(identifier)",
      "kind": "identifier",
      "grammar": "identifier",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "(config *config.SearchConfig, context string)",
      "expr": "(parameter_list (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))) (parameter_declaration name: (identifier) type: (type_identifier)))",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "config *config.SearchConfig",
          "expr": "(parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier))))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "config",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "*config.SearchConfig",
              "expr": "(pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))",
              "kind": "pointer_type",
              "grammar": "pointer_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "*",
                  "expr": "(\"*\")",
                  "kind": "*",
                  "grammar": "*",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "config.SearchConfig",
                  "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                  "kind": "qualified_type",
                  "grammar": "qualified_type",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "config",
                      "expr": "(package_identifier)",
                      "kind": "package_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ".",
                      "expr": "(\".\")",
                      "kind": ".",
                      "grammar": ".",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "SearchConfig",
                      "expr": "(type_identifier)",
                      "kind": "type_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "context string",
          "expr": "(parameter_declaration name: (identifier) type: (type_identifier))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "context",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "string",
              "expr": "(type_identifier)",
              "kind": "type_identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "(int, []string)",
      "expr": "(parameter_list (parameter_declaration type: (type_identifier)) (parameter_declaration type: (slice_type element: (type_identifier))))",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "int",
          "expr": "(parameter_declaration type: (type_identifier))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "int",
              "expr": "(type_identifier)",
              "kind": "type_identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "[]string",
          "expr": "(parameter_declaration type: (slice_type element: (type_identifier)))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "[]string",
              "expr": "(slice_type element: (type_identifier))",
              "kind": "slice_type",
              "grammar": "slice_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "[",
                  "expr": "(\"[\")",
                  "kind": "[",
                  "grammar": "[",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "]",
                  "expr": "(\"]\")",
                  "kind": "]",
                  "grammar": "]",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "string",
                  "expr": "(type_identifier)",
                  "kind": "type_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "{\n    score := 0\n    contextToken := strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")\n    positiveMatch := []string{}\n    for _, keyword := range *config.SearchKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score += 2\n            } else if match.Distance <= 4 {\n                score += 1\n            }\n            positiveMatch = append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))\n        }\n    }\n    for _, keyword := range *config.IgnoreKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score -= 3\n            } else if match.Distance <= 4 {\n                score -= 2\n            }\n        }\n    }\n    // score += 1\n    return score, positiveMatch\n}",
      "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value)))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))))))) (comment) (return_statement (expression_list (identifier) (identifier))))",
      "kind": "block",
      "grammar": "block",
      "source_language": "Golang",
      "children": [
        {
          "raw": "{",
          "expr": "(\"{\")",
          "kind": "{",
          "grammar": "{",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score := 0",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal)))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "0",
              "expr": "(expression_list (int_literal))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "0",
                  "expr": "(int_literal)",
                  "kind": "int_literal",
                  "grammar": "int_literal",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "contextToken := strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal)))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "contextToken",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "contextToken",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "strings.Split",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "strings",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "Split",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
                      "expr": "(argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "strings.ReplaceAll(context, \"\\n\", \" \")",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "strings.ReplaceAll",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "strings",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "ReplaceAll",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(context, \"\\n\", \" \")",
                              "expr": "(argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "context",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "\"\\n\"",
                                  "expr": "(interpreted_string_literal (escape_sequence))",
                                  "kind": "interpreted_string_literal",
                                  "grammar": "interpreted_string_literal",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\\n",
                                      "expr": "(escape_sequence)",
                                      "kind": "escape_sequence",
                                      "grammar": "escape_sequence",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "\" \"",
                                  "expr": "(interpreted_string_literal)",
                                  "kind": "interpreted_string_literal",
                                  "grammar": "interpreted_string_literal",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "\" \"",
                          "expr": "(interpreted_string_literal)",
                          "kind": "interpreted_string_literal",
                          "grammar": "interpreted_string_literal",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "\"",
                              "expr": "(\"\"\")",
                              "kind": "\"",
                              "grammar": "\"",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "\"",
                              "expr": "(\"\"\")",
                              "kind": "\"",
                              "grammar": "\"",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "positiveMatch := []string{}",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "positiveMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "[]string{}",
              "expr": "(expression_list (composite_literal type: (slice_type element: (type_identifier)) body: (literal_value)))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "[]string{}",
                  "expr": "(composite_literal type: (slice_type element: (type_identifier)) body: (literal_value))",
                  "kind": "composite_literal",
                  "grammar": "composite_literal",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "[]string",
                      "expr": "(slice_type element: (type_identifier))",
                      "kind": "slice_type",
                      "grammar": "slice_type",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "[",
                          "expr": "(\"[\")",
                          "kind": "[",
                          "grammar": "[",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "]",
                          "expr": "(\"]\")",
                          "kind": "]",
                          "grammar": "]",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "string",
                          "expr": "(type_identifier)",
                          "kind": "type_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{}",
                      "expr": "(literal_value)",
                      "kind": "literal_value",
                      "grammar": "literal_value",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, keyword := range *config.SearchKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score += 2\n            } else if match.Distance <= 4 {\n                score += 1\n            }\n            positiveMatch = append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))\n        }\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, keyword := range *config.SearchKeywords",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier))))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, keyword",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "keyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "*config.SearchKeywords",
                  "expr": "(unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))",
                  "kind": "unary_expression",
                  "grammar": "unary_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "*",
                      "expr": "(\"*\")",
                      "kind": "*",
                      "grammar": "*",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "config.SearchKeywords",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "config",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "SearchKeywords",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score += 2\n            } else if match.Distance <= 4 {\n                score += 1\n            }\n            positiveMatch = append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))\n        }\n    }",
              "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "matched := fuzzy.RankFindFold(keyword, contextToken)",
                  "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))))",
                  "kind": "short_var_declaration",
                  "grammar": "short_var_declaration",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "matched",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "matched",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": ":=",
                      "expr": "(\":=\")",
                      "kind": ":=",
                      "grammar": ":=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "fuzzy.RankFindFold",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "fuzzy",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "RankFindFold",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(keyword, contextToken)",
                              "expr": "(argument_list (identifier) (identifier))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "keyword",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "contextToken",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "for _, match := range matched {\n            if match.Distance == 0 {\n                score += 2\n            } else if match.Distance <= 4 {\n                score += 1\n            }\n            positiveMatch = append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))\n        }",
                  "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))))))",
                  "kind": "for_statement",
                  "grammar": "for_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "for",
                      "expr": "(\"for\")",
                      "kind": "for",
                      "grammar": "for",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "_, match := range matched",
                      "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (identifier))",
                      "kind": "range_clause",
                      "grammar": "range_clause",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "_, match",
                          "expr": "(expression_list (identifier) (identifier))",
                          "kind": "expression_list",
                          "grammar": "expression_list",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "_",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ",",
                              "expr": "(\",\")",
                              "kind": ",",
                              "grammar": ",",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "match",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ":=",
                          "expr": "(\":=\")",
                          "kind": ":=",
                          "grammar": ":=",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "range",
                          "expr": "(\"range\")",
                          "kind": "range",
                          "grammar": "range",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "matched",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{\n            if match.Distance == 0 {\n                score += 2\n            } else if match.Distance <= 4 {\n                score += 1\n            }\n            positiveMatch = append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))\n        }",
                      "expr": "(block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))",
                      "kind": "block",
                      "grammar": "block",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "if match.Distance == 0 {\n                score += 2\n            } else if match.Distance <= 4 {\n                score += 1\n            }",
                          "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))))",
                          "kind": "if_statement",
                          "grammar": "if_statement",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "if",
                              "expr": "(\"if\")",
                              "kind": "if",
                              "grammar": "if",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "match.Distance == 0",
                              "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                              "kind": "binary_expression",
                              "grammar": "binary_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "match.Distance",
                                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                  "kind": "selector_expression",
                                  "grammar": "selector_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "match",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": ".",
                                      "expr": "(\".\")",
                                      "kind": ".",
                                      "grammar": ".",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "Distance",
                                      "expr": "(field_identifier)",
                                      "kind": "field_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "==",
                                  "expr": "(\"==\")",
                                  "kind": "==",
                                  "grammar": "==",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "0",
                                  "expr": "(int_literal)",
                                  "kind": "int_literal",
                                  "grammar": "int_literal",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "{\n                score += 2\n            }",
                              "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))",
                              "kind": "block",
                              "grammar": "block",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "{",
                                  "expr": "(\"{\")",
                                  "kind": "{",
                                  "grammar": "{",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "score += 2",
                                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))",
                                  "kind": "assignment_statement",
                                  "grammar": "assignment_statement",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "score",
                                      "expr": "(expression_list (identifier))",
                                      "kind": "expression_list",
                                      "grammar": "expression_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "score",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "+=",
                                      "expr": "(\"+=\")",
                                      "kind": "+=",
                                      "grammar": "+=",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "2",
                                      "expr": "(expression_list (int_literal))",
                                      "kind": "expression_list",
                                      "grammar": "expression_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "2",
                                          "expr": "(int_literal)",
                                          "kind": "int_literal",
                                          "grammar": "int_literal",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "\n",
                                  "expr": "(\"\n\")",
                                  "kind": "\n",
                                  "grammar": "\n",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "}",
                                  "expr": "(\"}\")",
                                  "kind": "}",
                                  "grammar": "}",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "else",
                              "expr": "(\"else\")",
                              "kind": "else",
                              "grammar": "else",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "if match.Distance <= 4 {\n                score += 1\n            }",
                              "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))",
                              "kind": "if_statement",
                              "grammar": "if_statement",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "if",
                                  "expr": "(\"if\")",
                                  "kind": "if",
                                  "grammar": "if",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "match.Distance <= 4",
                                  "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                                  "kind": "binary_expression",
                                  "grammar": "binary_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "match.Distance",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "match",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Distance",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "<=",
                                      "expr": "(\"<=\")",
                                      "kind": "<=",
                                      "grammar": "<=",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "4",
                                      "expr": "(int_literal)",
                                      "kind": "int_literal",
                                      "grammar": "int_literal",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "{\n                score += 1\n            }",
                                  "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))",
                                  "kind": "block",
                                  "grammar": "block",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "{",
                                      "expr": "(\"{\")",
                                      "kind": "{",
                                      "grammar": "{",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "score += 1",
                                      "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))",
                                      "kind": "assignment_statement",
                                      "grammar": "assignment_statement",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "score",
                                          "expr": "(expression_list (identifier))",
                                          "kind": "expression_list",
                                          "grammar": "expression_list",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "score",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "+=",
                                          "expr": "(\"+=\")",
                                          "kind": "+=",
                                          "grammar": "+=",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "1",
                                          "expr": "(expression_list (int_literal))",
                                          "kind": "expression_list",
                                          "grammar": "expression_list",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "1",
                                              "expr": "(int_literal)",
                                              "kind": "int_literal",
                                              "grammar": "int_literal",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\n",
                                      "expr": "(\"\n\")",
                                      "kind": "\n",
                                      "grammar": "\n",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "}",
                                      "expr": "(\"}\")",
                                      "kind": "}",
                                      "grammar": "}",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "positiveMatch = append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))",
                          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))))",
                          "kind": "assignment_statement",
                          "grammar": "assignment_statement",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "positiveMatch",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "positiveMatch",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "=",
                              "expr": "(\"=\")",
                              "kind": "=",
                              "grammar": "=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))",
                              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "append(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))",
                                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "append",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(positiveMatch, fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target))",
                                      "expr": "(argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "positiveMatch",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "fmt.Sprintf(\"[%s:%s]\", match.Source, match.Target)",
                                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))",
                                          "kind": "call_expression",
                                          "grammar": "call_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "fmt.Sprintf",
                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                              "kind": "selector_expression",
                                              "grammar": "selector_expression",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "fmt",
                                                  "expr": "(identifier)",
                                                  "kind": "identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ".",
                                                  "expr": "(\".\")",
                                                  "kind": ".",
                                                  "grammar": ".",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "Sprintf",
                                                  "expr": "(field_identifier)",
                                                  "kind": "field_identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "(\"[%s:%s]\", match.Source, match.Target)",
                                              "expr": "(argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))",
                                              "kind": "argument_list",
                                              "grammar": "argument_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "(",
                                                  "expr": "(\"(\")",
                                                  "kind": "(",
                                                  "grammar": "(",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "\"[%s:%s]\"",
                                                  "expr": "(interpreted_string_literal)",
                                                  "kind": "interpreted_string_literal",
                                                  "grammar": "interpreted_string_literal",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "\"",
                                                      "expr": "(\"\"\")",
                                                      "kind": "\"",
                                                      "grammar": "\"",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "\"",
                                                      "expr": "(\"\"\")",
                                                      "kind": "\"",
                                                      "grammar": "\"",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "match.Source",
                                                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                  "kind": "selector_expression",
                                                  "grammar": "selector_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "match",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": ".",
                                                      "expr": "(\".\")",
                                                      "kind": ".",
                                                      "grammar": ".",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "Source",
                                                      "expr": "(field_identifier)",
                                                      "kind": "field_identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "match.Target",
                                                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                  "kind": "selector_expression",
                                                  "grammar": "selector_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "match",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": ".",
                                                      "expr": "(\".\")",
                                                      "kind": ".",
                                                      "grammar": ".",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "Target",
                                                      "expr": "(field_identifier)",
                                                      "kind": "field_identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ")",
                                                  "expr": "(\")\")",
                                                  "kind": ")",
                                                  "grammar": ")",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, keyword := range *config.IgnoreKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score -= 3\n            } else if match.Distance <= 4 {\n                score -= 2\n            }\n        }\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, keyword := range *config.IgnoreKeywords",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier))))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, keyword",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "keyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "*config.IgnoreKeywords",
                  "expr": "(unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))",
                  "kind": "unary_expression",
                  "grammar": "unary_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "*",
                      "expr": "(\"*\")",
                      "kind": "*",
                      "grammar": "*",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "config.IgnoreKeywords",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "config",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "IgnoreKeywords",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        for _, match := range matched {\n            if match.Distance == 0 {\n                score -= 3\n            } else if match.Distance <= 4 {\n                score -= 2\n            }\n        }\n    }",
              "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "matched := fuzzy.RankFindFold(keyword, contextToken)",
                  "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))))",
                  "kind": "short_var_declaration",
                  "grammar": "short_var_declaration",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "matched",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "matched",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": ":=",
                      "expr": "(\":=\")",
                      "kind": ":=",
                      "grammar": ":=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "fuzzy.RankFindFold",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "fuzzy",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "RankFindFold",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(keyword, contextToken)",
                              "expr": "(argument_list (identifier) (identifier))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "keyword",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "contextToken",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "for _, match := range matched {\n            if match.Distance == 0 {\n                score -= 3\n            } else if match.Distance <= 4 {\n                score -= 2\n            }\n        }",
                  "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))))))",
                  "kind": "for_statement",
                  "grammar": "for_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "for",
                      "expr": "(\"for\")",
                      "kind": "for",
                      "grammar": "for",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "_, match := range matched",
                      "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (identifier))",
                      "kind": "range_clause",
                      "grammar": "range_clause",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "_, match",
                          "expr": "(expression_list (identifier) (identifier))",
                          "kind": "expression_list",
                          "grammar": "expression_list",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "_",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ",",
                              "expr": "(\",\")",
                              "kind": ",",
                              "grammar": ",",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "match",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ":=",
                          "expr": "(\":=\")",
                          "kind": ":=",
                          "grammar": ":=",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "range",
                          "expr": "(\"range\")",
                          "kind": "range",
                          "grammar": "range",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "matched",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{\n            if match.Distance == 0 {\n                score -= 3\n            } else if match.Distance <= 4 {\n                score -= 2\n            }\n        }",
                      "expr": "(block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))))",
                      "kind": "block",
                      "grammar": "block",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "if match.Distance == 0 {\n                score -= 3\n            } else if match.Distance <= 4 {\n                score -= 2\n            }",
                          "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))))",
                          "kind": "if_statement",
                          "grammar": "if_statement",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "if",
                              "expr": "(\"if\")",
                              "kind": "if",
                              "grammar": "if",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "match.Distance == 0",
                              "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                              "kind": "binary_expression",
                              "grammar": "binary_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "match.Distance",
                                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                  "kind": "selector_expression",
                                  "grammar": "selector_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "match",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": ".",
                                      "expr": "(\".\")",
                                      "kind": ".",
                                      "grammar": ".",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "Distance",
                                      "expr": "(field_identifier)",
                                      "kind": "field_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "==",
                                  "expr": "(\"==\")",
                                  "kind": "==",
                                  "grammar": "==",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "0",
                                  "expr": "(int_literal)",
                                  "kind": "int_literal",
                                  "grammar": "int_literal",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "{\n                score -= 3\n            }",
                              "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))",
                              "kind": "block",
                              "grammar": "block",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "{",
                                  "expr": "(\"{\")",
                                  "kind": "{",
                                  "grammar": "{",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "score -= 3",
                                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))",
                                  "kind": "assignment_statement",
                                  "grammar": "assignment_statement",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "score",
                                      "expr": "(expression_list (identifier))",
                                      "kind": "expression_list",
                                      "grammar": "expression_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "score",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "-=",
                                      "expr": "(\"-=\")",
                                      "kind": "-=",
                                      "grammar": "-=",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "3",
                                      "expr": "(expression_list (int_literal))",
                                      "kind": "expression_list",
                                      "grammar": "expression_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "3",
                                          "expr": "(int_literal)",
                                          "kind": "int_literal",
                                          "grammar": "int_literal",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "\n",
                                  "expr": "(\"\n\")",
                                  "kind": "\n",
                                  "grammar": "\n",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "}",
                                  "expr": "(\"}\")",
                                  "kind": "}",
                                  "grammar": "}",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "else",
                              "expr": "(\"else\")",
                              "kind": "else",
                              "grammar": "else",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "if match.Distance <= 4 {\n                score -= 2\n            }",
                              "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))))",
                              "kind": "if_statement",
                              "grammar": "if_statement",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "if",
                                  "expr": "(\"if\")",
                                  "kind": "if",
                                  "grammar": "if",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "match.Distance <= 4",
                                  "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                                  "kind": "binary_expression",
                                  "grammar": "binary_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "match.Distance",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "match",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Distance",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "<=",
                                      "expr": "(\"<=\")",
                                      "kind": "<=",
                                      "grammar": "<=",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "4",
                                      "expr": "(int_literal)",
                                      "kind": "int_literal",
                                      "grammar": "int_literal",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "{\n                score -= 2\n            }",
                                  "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal))))",
                                  "kind": "block",
                                  "grammar": "block",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "{",
                                      "expr": "(\"{\")",
                                      "kind": "{",
                                      "grammar": "{",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "score -= 2",
                                      "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (int_literal)))",
                                      "kind": "assignment_statement",
                                      "grammar": "assignment_statement",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "score",
                                          "expr": "(expression_list (identifier))",
                                          "kind": "expression_list",
                                          "grammar": "expression_list",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "score",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "-=",
                                          "expr": "(\"-=\")",
                                          "kind": "-=",
                                          "grammar": "-=",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "2",
                                          "expr": "(expression_list (int_literal))",
                                          "kind": "expression_list",
                                          "grammar": "expression_list",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "2",
                                              "expr": "(int_literal)",
                                              "kind": "int_literal",
                                              "grammar": "int_literal",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\n",
                                      "expr": "(\"\n\")",
                                      "kind": "\n",
                                      "grammar": "\n",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "}",
                                      "expr": "(\"}\")",
                                      "kind": "}",
                                      "grammar": "}",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "// score += 1",
          "expr": "(comment)",
          "kind": "comment",
          "grammar": "comment",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "return score, positiveMatch",
          "expr": "(return_statement (expression_list (identifier) (identifier)))",
          "kind": "return_statement",
          "grammar": "return_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "return",
              "expr": "(\"return\")",
              "kind": "return",
              "grammar": "return",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "score, positiveMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "}",
          "expr": "(\"}\")",
          "kind": "}",
          "grammar": "}",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "func",
      "expr": "(\"func\")",
      "kind": "func",
      "grammar": "func",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "ScorePostMatchingKeyword",
      "expr": "(identifier)",
      "kind": "identifier",
      "grammar": "identifier",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "(config *config.SearchConfig, context string)",
      "expr": "(parameter_list (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))) (parameter_declaration name: (identifier) type: (type_identifier)))",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "config *config.SearchConfig",
          "expr": "(parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier))))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "config",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "*config.SearchConfig",
              "expr": "(pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))",
              "kind": "pointer_type",
              "grammar": "pointer_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "*",
                  "expr": "(\"*\")",
                  "kind": "*",
                  "grammar": "*",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "config.SearchConfig",
                  "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                  "kind": "qualified_type",
                  "grammar": "qualified_type",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "config",
                      "expr": "(package_identifier)",
                      "kind": "package_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ".",
                      "expr": "(\".\")",
                      "kind": ".",
                      "grammar": ".",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "SearchConfig",
                      "expr": "(type_identifier)",
                      "kind": "type_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "context string",
          "expr": "(parameter_declaration name: (identifier) type: (type_identifier))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "context",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "string",
              "expr": "(type_identifier)",
              "kind": "type_identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "(fuzzy.Ranks, fuzzy.Ranks)",
      "expr": "(parameter_list (parameter_declaration type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration type: (qualified_type package: (package_identifier) name: (type_identifier))))",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "fuzzy.Ranks",
          "expr": "(parameter_declaration type: (qualified_type package: (package_identifier) name: (type_identifier)))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "fuzzy.Ranks",
              "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
              "kind": "qualified_type",
              "grammar": "qualified_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "fuzzy",
                  "expr": "(package_identifier)",
                  "kind": "package_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ".",
                  "expr": "(\".\")",
                  "kind": ".",
                  "grammar": ".",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "Ranks",
                  "expr": "(type_identifier)",
                  "kind": "type_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "fuzzy.Ranks",
          "expr": "(parameter_declaration type: (qualified_type package: (package_identifier) name: (type_identifier)))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "fuzzy.Ranks",
              "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
              "kind": "qualified_type",
              "grammar": "qualified_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "fuzzy",
                  "expr": "(package_identifier)",
                  "kind": "package_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ".",
                  "expr": "(\".\")",
                  "kind": ".",
                  "grammar": ".",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "Ranks",
                  "expr": "(type_identifier)",
                  "kind": "type_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "{\n    // score := 0\n    contextToken := strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")\n    // positiveMatch := []string{}\n    posMatch := make(fuzzy.Ranks, 0)\n    negMatch := make(fuzzy.Ranks, 0)\n    for _, keyword := range *config.SearchKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        posMatch = append(posMatch, matched...)\n    }\n    posMatch = lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })\n    for _, keyword := range *config.IgnoreKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        negMatch = append(negMatch, matched...)\n    }\n    negMatch = lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })\n    return posMatch, negMatch\n}",
      "expr": "(block (comment) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))))) (comment) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))))) (return_statement (expression_list (identifier) (identifier))))",
      "kind": "block",
      "grammar": "block",
      "source_language": "Golang",
      "children": [
        {
          "raw": "{",
          "expr": "(\"{\")",
          "kind": "{",
          "grammar": "{",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "// score := 0",
          "expr": "(comment)",
          "kind": "comment",
          "grammar": "comment",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "contextToken := strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal)))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "contextToken",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "contextToken",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "strings.Split(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "strings.Split",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "strings",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "Split",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "(strings.ReplaceAll(context, \"\\n\", \" \"), \" \")",
                      "expr": "(argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))) (interpreted_string_literal))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "strings.ReplaceAll(context, \"\\n\", \" \")",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "strings.ReplaceAll",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "strings",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "ReplaceAll",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(context, \"\\n\", \" \")",
                              "expr": "(argument_list (identifier) (interpreted_string_literal (escape_sequence)) (interpreted_string_literal))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "context",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "\"\\n\"",
                                  "expr": "(interpreted_string_literal (escape_sequence))",
                                  "kind": "interpreted_string_literal",
                                  "grammar": "interpreted_string_literal",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\\n",
                                      "expr": "(escape_sequence)",
                                      "kind": "escape_sequence",
                                      "grammar": "escape_sequence",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "\" \"",
                                  "expr": "(interpreted_string_literal)",
                                  "kind": "interpreted_string_literal",
                                  "grammar": "interpreted_string_literal",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "\"",
                                      "expr": "(\"\"\")",
                                      "kind": "\"",
                                      "grammar": "\"",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "\" \"",
                          "expr": "(interpreted_string_literal)",
                          "kind": "interpreted_string_literal",
                          "grammar": "interpreted_string_literal",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "\"",
                              "expr": "(\"\"\")",
                              "kind": "\"",
                              "grammar": "\"",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "\"",
                              "expr": "(\"\"\")",
                              "kind": "\"",
                              "grammar": "\"",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "// positiveMatch := []string{}",
          "expr": "(comment)",
          "kind": "comment",
          "grammar": "comment",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "posMatch := make(fuzzy.Ranks, 0)",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "posMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "posMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "make(fuzzy.Ranks, 0)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "make(fuzzy.Ranks, 0)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "make",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(fuzzy.Ranks, 0)",
                      "expr": "(argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "fuzzy.Ranks",
                          "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                          "kind": "qualified_type",
                          "grammar": "qualified_type",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "fuzzy",
                              "expr": "(package_identifier)",
                              "kind": "package_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "Ranks",
                              "expr": "(type_identifier)",
                              "kind": "type_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "0",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "negMatch := make(fuzzy.Ranks, 0)",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "negMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "make(fuzzy.Ranks, 0)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "make(fuzzy.Ranks, 0)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "make",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(fuzzy.Ranks, 0)",
                      "expr": "(argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "fuzzy.Ranks",
                          "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                          "kind": "qualified_type",
                          "grammar": "qualified_type",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "fuzzy",
                              "expr": "(package_identifier)",
                              "kind": "package_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "Ranks",
                              "expr": "(type_identifier)",
                              "kind": "type_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "0",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, keyword := range *config.SearchKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        posMatch = append(posMatch, matched...)\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, keyword := range *config.SearchKeywords",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier))))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, keyword",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "keyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "*config.SearchKeywords",
                  "expr": "(unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))",
                  "kind": "unary_expression",
                  "grammar": "unary_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "*",
                      "expr": "(\"*\")",
                      "kind": "*",
                      "grammar": "*",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "config.SearchKeywords",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "config",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "SearchKeywords",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        posMatch = append(posMatch, matched...)\n    }",
              "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "matched := fuzzy.RankFindFold(keyword, contextToken)",
                  "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))))",
                  "kind": "short_var_declaration",
                  "grammar": "short_var_declaration",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "matched",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "matched",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": ":=",
                      "expr": "(\":=\")",
                      "kind": ":=",
                      "grammar": ":=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "fuzzy.RankFindFold",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "fuzzy",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "RankFindFold",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(keyword, contextToken)",
                              "expr": "(argument_list (identifier) (identifier))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "keyword",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "contextToken",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "posMatch = append(posMatch, matched...)",
                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
                  "kind": "assignment_statement",
                  "grammar": "assignment_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "posMatch",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "posMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "=",
                      "expr": "(\"=\")",
                      "kind": "=",
                      "grammar": "=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "append(posMatch, matched...)",
                      "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "append(posMatch, matched...)",
                          "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "append",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(posMatch, matched...)",
                              "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "posMatch",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "matched...",
                                  "expr": "(variadic_argument (identifier))",
                                  "kind": "variadic_argument",
                                  "grammar": "variadic_argument",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "matched",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "...",
                                      "expr": "(\"...\")",
                                      "kind": "...",
                                      "grammar": "...",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "posMatch = lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "posMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "posMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "lo.Filter",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "lo",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "Filter",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "(posMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
                      "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "posMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    }",
                          "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))))",
                          "kind": "func_literal",
                          "grammar": "func_literal",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "func",
                              "expr": "(\"func\")",
                              "kind": "func",
                              "grammar": "func",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(item fuzzy.Rank, _ int)",
                              "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier)))",
                              "kind": "parameter_list",
                              "grammar": "parameter_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "item fuzzy.Rank",
                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                  "kind": "parameter_declaration",
                                  "grammar": "parameter_declaration",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "item",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "fuzzy.Rank",
                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                      "kind": "qualified_type",
                                      "grammar": "qualified_type",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "fuzzy",
                                          "expr": "(package_identifier)",
                                          "kind": "package_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Rank",
                                          "expr": "(type_identifier)",
                                          "kind": "type_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "_ int",
                                  "expr": "(parameter_declaration name: (identifier) type: (type_identifier))",
                                  "kind": "parameter_declaration",
                                  "grammar": "parameter_declaration",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "_",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "int",
                                      "expr": "(type_identifier)",
                                      "kind": "type_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "bool",
                              "expr": "(type_identifier)",
                              "kind": "type_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "{\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    }",
                              "expr": "(block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))",
                              "kind": "block",
                              "grammar": "block",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "{",
                                  "expr": "(\"{\")",
                                  "kind": "{",
                                  "grammar": "{",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                  "expr": "(return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))",
                                  "kind": "return_statement",
                                  "grammar": "return_statement",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "return",
                                      "expr": "(\"return\")",
                                      "kind": "return",
                                      "grammar": "return",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))",
                                      "kind": "expression_list",
                                      "grammar": "expression_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))",
                                          "kind": "call_expression",
                                          "grammar": "call_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "strings.Contains",
                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                              "kind": "selector_expression",
                                              "grammar": "selector_expression",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "strings",
                                                  "expr": "(identifier)",
                                                  "kind": "identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ".",
                                                  "expr": "(\".\")",
                                                  "kind": ".",
                                                  "grammar": ".",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "Contains",
                                                  "expr": "(field_identifier)",
                                                  "kind": "field_identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                              "expr": "(argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))",
                                              "kind": "argument_list",
                                              "grammar": "argument_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "(",
                                                  "expr": "(\"(\")",
                                                  "kind": "(",
                                                  "grammar": "(",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "strings.ToLower(item.Target)",
                                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))",
                                                  "kind": "call_expression",
                                                  "grammar": "call_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "strings.ToLower",
                                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                      "kind": "selector_expression",
                                                      "grammar": "selector_expression",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "strings",
                                                          "expr": "(identifier)",
                                                          "kind": "identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "ToLower",
                                                          "expr": "(field_identifier)",
                                                          "kind": "field_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "(item.Target)",
                                                      "expr": "(argument_list (selector_expression operand: (identifier) field: (field_identifier)))",
                                                      "kind": "argument_list",
                                                      "grammar": "argument_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "(",
                                                          "expr": "(\"(\")",
                                                          "kind": "(",
                                                          "grammar": "(",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "item.Target",
                                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                          "kind": "selector_expression",
                                                          "grammar": "selector_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item",
                                                              "expr": "(identifier)",
                                                              "kind": "identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": ".",
                                                              "expr": "(\".\")",
                                                              "kind": ".",
                                                              "grammar": ".",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "Target",
                                                              "expr": "(field_identifier)",
                                                              "kind": "field_identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ")",
                                                          "expr": "(\")\")",
                                                          "kind": ")",
                                                          "grammar": ")",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "strings.ToLower(item.Source)",
                                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))",
                                                  "kind": "call_expression",
                                                  "grammar": "call_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "strings.ToLower",
                                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                      "kind": "selector_expression",
                                                      "grammar": "selector_expression",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "strings",
                                                          "expr": "(identifier)",
                                                          "kind": "identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "ToLower",
                                                          "expr": "(field_identifier)",
                                                          "kind": "field_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "(item.Source)",
                                                      "expr": "(argument_list (selector_expression operand: (identifier) field: (field_identifier)))",
                                                      "kind": "argument_list",
                                                      "grammar": "argument_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "(",
                                                          "expr": "(\"(\")",
                                                          "kind": "(",
                                                          "grammar": "(",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "item.Source",
                                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                          "kind": "selector_expression",
                                                          "grammar": "selector_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item",
                                                              "expr": "(identifier)",
                                                              "kind": "identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": ".",
                                                              "expr": "(\".\")",
                                                              "kind": ".",
                                                              "grammar": ".",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "Source",
                                                              "expr": "(field_identifier)",
                                                              "kind": "field_identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ")",
                                                          "expr": "(\")\")",
                                                          "kind": ")",
                                                          "grammar": ")",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ")",
                                                  "expr": "(\")\")",
                                                  "kind": ")",
                                                  "grammar": ")",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "\n",
                                  "expr": "(\"\n\")",
                                  "kind": "\n",
                                  "grammar": "\n",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "}",
                                  "expr": "(\"}\")",
                                  "kind": "}",
                                  "grammar": "}",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, keyword := range *config.IgnoreKeywords {\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        negMatch = append(negMatch, matched...)\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, keyword := range *config.IgnoreKeywords",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier))))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, keyword",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "keyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "*config.IgnoreKeywords",
                  "expr": "(unary_expression operand: (selector_expression operand: (identifier) field: (field_identifier)))",
                  "kind": "unary_expression",
                  "grammar": "unary_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "*",
                      "expr": "(\"*\")",
                      "kind": "*",
                      "grammar": "*",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "config.IgnoreKeywords",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "config",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "IgnoreKeywords",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        matched := fuzzy.RankFindFold(keyword, contextToken)\n        negMatch = append(negMatch, matched...)\n    }",
              "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "matched := fuzzy.RankFindFold(keyword, contextToken)",
                  "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))))",
                  "kind": "short_var_declaration",
                  "grammar": "short_var_declaration",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "matched",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "matched",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": ":=",
                      "expr": "(\":=\")",
                      "kind": ":=",
                      "grammar": ":=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "fuzzy.RankFindFold(keyword, contextToken)",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (identifier)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "fuzzy.RankFindFold",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "fuzzy",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "RankFindFold",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(keyword, contextToken)",
                              "expr": "(argument_list (identifier) (identifier))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "keyword",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "contextToken",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "negMatch = append(negMatch, matched...)",
                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
                  "kind": "assignment_statement",
                  "grammar": "assignment_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "negMatch",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "negMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "=",
                      "expr": "(\"=\")",
                      "kind": "=",
                      "grammar": "=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "append(negMatch, matched...)",
                      "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "append(negMatch, matched...)",
                          "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "append",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(negMatch, matched...)",
                              "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "negMatch",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "matched...",
                                  "expr": "(variadic_argument (identifier))",
                                  "kind": "variadic_argument",
                                  "grammar": "variadic_argument",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "matched",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "...",
                                      "expr": "(\"...\")",
                                      "kind": "...",
                                      "grammar": "...",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "negMatch = lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "negMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "lo.Filter",
                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                      "kind": "selector_expression",
                      "grammar": "selector_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "lo",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ".",
                          "expr": "(\".\")",
                          "kind": ".",
                          "grammar": ".",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "Filter",
                          "expr": "(field_identifier)",
                          "kind": "field_identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "(negMatch, func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    })",
                      "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "negMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "func(item fuzzy.Rank, _ int) bool {\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    }",
                          "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))))",
                          "kind": "func_literal",
                          "grammar": "func_literal",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "func",
                              "expr": "(\"func\")",
                              "kind": "func",
                              "grammar": "func",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(item fuzzy.Rank, _ int)",
                              "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier)))",
                              "kind": "parameter_list",
                              "grammar": "parameter_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "item fuzzy.Rank",
                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                  "kind": "parameter_declaration",
                                  "grammar": "parameter_declaration",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "item",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "fuzzy.Rank",
                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                      "kind": "qualified_type",
                                      "grammar": "qualified_type",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "fuzzy",
                                          "expr": "(package_identifier)",
                                          "kind": "package_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Rank",
                                          "expr": "(type_identifier)",
                                          "kind": "type_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "_ int",
                                  "expr": "(parameter_declaration name: (identifier) type: (type_identifier))",
                                  "kind": "parameter_declaration",
                                  "grammar": "parameter_declaration",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "_",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "int",
                                      "expr": "(type_identifier)",
                                      "kind": "type_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "bool",
                              "expr": "(type_identifier)",
                              "kind": "type_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "{\n        return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))\n    }",
                              "expr": "(block (return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))))",
                              "kind": "block",
                              "grammar": "block",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "{",
                                  "expr": "(\"{\")",
                                  "kind": "{",
                                  "grammar": "{",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "return strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                  "expr": "(return_statement (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))))",
                                  "kind": "return_statement",
                                  "grammar": "return_statement",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "return",
                                      "expr": "(\"return\")",
                                      "kind": "return",
                                      "grammar": "return",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))))",
                                      "kind": "expression_list",
                                      "grammar": "expression_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "strings.Contains(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))))",
                                          "kind": "call_expression",
                                          "grammar": "call_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "strings.Contains",
                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                              "kind": "selector_expression",
                                              "grammar": "selector_expression",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "strings",
                                                  "expr": "(identifier)",
                                                  "kind": "identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ".",
                                                  "expr": "(\".\")",
                                                  "kind": ".",
                                                  "grammar": ".",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "Contains",
                                                  "expr": "(field_identifier)",
                                                  "kind": "field_identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "(strings.ToLower(item.Target), strings.ToLower(item.Source))",
                                              "expr": "(argument_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier)))))",
                                              "kind": "argument_list",
                                              "grammar": "argument_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "(",
                                                  "expr": "(\"(\")",
                                                  "kind": "(",
                                                  "grammar": "(",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "strings.ToLower(item.Target)",
                                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))",
                                                  "kind": "call_expression",
                                                  "grammar": "call_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "strings.ToLower",
                                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                      "kind": "selector_expression",
                                                      "grammar": "selector_expression",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "strings",
                                                          "expr": "(identifier)",
                                                          "kind": "identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "ToLower",
                                                          "expr": "(field_identifier)",
                                                          "kind": "field_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "(item.Target)",
                                                      "expr": "(argument_list (selector_expression operand: (identifier) field: (field_identifier)))",
                                                      "kind": "argument_list",
                                                      "grammar": "argument_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "(",
                                                          "expr": "(\"(\")",
                                                          "kind": "(",
                                                          "grammar": "(",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "item.Target",
                                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                          "kind": "selector_expression",
                                                          "grammar": "selector_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item",
                                                              "expr": "(identifier)",
                                                              "kind": "identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": ".",
                                                              "expr": "(\".\")",
                                                              "kind": ".",
                                                              "grammar": ".",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "Target",
                                                              "expr": "(field_identifier)",
                                                              "kind": "field_identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ")",
                                                          "expr": "(\")\")",
                                                          "kind": ")",
                                                          "grammar": ")",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "strings.ToLower(item.Source)",
                                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (selector_expression operand: (identifier) field: (field_identifier))))",
                                                  "kind": "call_expression",
                                                  "grammar": "call_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "strings.ToLower",
                                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                      "kind": "selector_expression",
                                                      "grammar": "selector_expression",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "strings",
                                                          "expr": "(identifier)",
                                                          "kind": "identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "ToLower",
                                                          "expr": "(field_identifier)",
                                                          "kind": "field_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "(item.Source)",
                                                      "expr": "(argument_list (selector_expression operand: (identifier) field: (field_identifier)))",
                                                      "kind": "argument_list",
                                                      "grammar": "argument_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "(",
                                                          "expr": "(\"(\")",
                                                          "kind": "(",
                                                          "grammar": "(",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "item.Source",
                                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                          "kind": "selector_expression",
                                                          "grammar": "selector_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item",
                                                              "expr": "(identifier)",
                                                              "kind": "identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": ".",
                                                              "expr": "(\".\")",
                                                              "kind": ".",
                                                              "grammar": ".",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "Source",
                                                              "expr": "(field_identifier)",
                                                              "kind": "field_identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ")",
                                                          "expr": "(\")\")",
                                                          "kind": ")",
                                                          "grammar": ")",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ")",
                                                  "expr": "(\")\")",
                                                  "kind": ")",
                                                  "grammar": ")",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "\n",
                                  "expr": "(\"\n\")",
                                  "kind": "\n",
                                  "grammar": "\n",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "}",
                                  "expr": "(\"}\")",
                                  "kind": "}",
                                  "grammar": "}",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "return posMatch, negMatch",
          "expr": "(return_statement (expression_list (identifier) (identifier)))",
          "kind": "return_statement",
          "grammar": "return_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "return",
              "expr": "(\"return\")",
              "kind": "return",
              "grammar": "return",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "posMatch, negMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "posMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "negMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "}",
          "expr": "(\"}\")",
          "kind": "}",
          "grammar": "}",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "func",
      "expr": "(\"func\")",
      "kind": "func",
      "grammar": "func",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "scoringMatch",
      "expr": "(identifier)",
      "kind": "identifier",
      "grammar": "identifier",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "(posMatch, negMatch fuzzy.Ranks, posFullScore, posPartScore, negFullScore, negPartScore int, ignoreRepeated bool)",
      "expr": "(parameter_list (parameter_declaration name: (identifier) name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) name: (identifier) name: (identifier) name: (identifier) type: (type_identifier)) (parameter_declaration name: (identifier) type: (type_identifier)))",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "posMatch, negMatch fuzzy.Ranks",
          "expr": "(parameter_declaration name: (identifier) name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "posMatch",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": ",",
              "expr": "(\",\")",
              "kind": ",",
              "grammar": ",",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "negMatch",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "fuzzy.Ranks",
              "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
              "kind": "qualified_type",
              "grammar": "qualified_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "fuzzy",
                  "expr": "(package_identifier)",
                  "kind": "package_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ".",
                  "expr": "(\".\")",
                  "kind": ".",
                  "grammar": ".",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "Ranks",
                  "expr": "(type_identifier)",
                  "kind": "type_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "posFullScore, posPartScore, negFullScore, negPartScore int",
          "expr": "(parameter_declaration name: (identifier) name: (identifier) name: (identifier) name: (identifier) type: (type_identifier))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "posFullScore",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": ",",
              "expr": "(\",\")",
              "kind": ",",
              "grammar": ",",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "posPartScore",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": ",",
              "expr": "(\",\")",
              "kind": ",",
              "grammar": ",",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "negFullScore",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": ",",
              "expr": "(\",\")",
              "kind": ",",
              "grammar": ",",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "negPartScore",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "int",
              "expr": "(type_identifier)",
              "kind": "type_identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "ignoreRepeated bool",
          "expr": "(parameter_declaration name: (identifier) type: (type_identifier))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "ignoreRepeated",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "bool",
              "expr": "(type_identifier)",
              "kind": "type_identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "int",
      "expr": "(type_identifier)",
      "kind": "type_identifier",
      "grammar": "identifier",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "{\n    score := 0\n    pMatch := posMatch\n    nMatch := negMatch\n    if ignoreRepeated {\n        pMatch = make(fuzzy.Ranks, 0)\n        keys := lo.KeyBy(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            pMatch = append(pMatch, item)\n        }\n        nMatch = make(fuzzy.Ranks, 0)\n        keys = lo.KeyBy(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            nMatch = append(nMatch, item)\n        }\n    }\n    for _, match := range pMatch {\n        if match.Distance == 0 {\n            score += posFullScore\n        } else if match.Distance <= 4 {\n            score += posPartScore\n        }\n    }\n    for _, match := range nMatch {\n        if match.Distance == 0 {\n            score -= negFullScore\n        } else if match.Distance <= 4 {\n            score -= negPartScore\n        }\n    }\n    return score\n}",
      "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (identifier))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (identifier))) (if_statement condition: (identifier) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))))) (return_statement (expression_list (identifier))))",
      "kind": "block",
      "grammar": "block",
      "source_language": "Golang",
      "children": [
        {
          "raw": "{",
          "expr": "(\"{\")",
          "kind": "{",
          "grammar": "{",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score := 0",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal)))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "0",
              "expr": "(expression_list (int_literal))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "0",
                  "expr": "(int_literal)",
                  "kind": "int_literal",
                  "grammar": "int_literal",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "pMatch := posMatch",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (identifier)))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "pMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "pMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "posMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "posMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "nMatch := negMatch",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (identifier)))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "nMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "nMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "negMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "if ignoreRepeated {\n        pMatch = make(fuzzy.Ranks, 0)\n        keys := lo.KeyBy(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            pMatch = append(pMatch, item)\n        }\n        nMatch = make(fuzzy.Ranks, 0)\n        keys = lo.KeyBy(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            nMatch = append(nMatch, item)\n        }\n    }",
          "expr": "(if_statement condition: (identifier) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))))))))",
          "kind": "if_statement",
          "grammar": "if_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "if",
              "expr": "(\"if\")",
              "kind": "if",
              "grammar": "if",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "ignoreRepeated",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "{\n        pMatch = make(fuzzy.Ranks, 0)\n        keys := lo.KeyBy(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            pMatch = append(pMatch, item)\n        }\n        nMatch = make(fuzzy.Ranks, 0)\n        keys = lo.KeyBy(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })\n        for keyRef := range keys {\n            items := lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            nMatch = append(nMatch, item)\n        }\n    }",
              "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "pMatch = make(fuzzy.Ranks, 0)",
                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))))",
                  "kind": "assignment_statement",
                  "grammar": "assignment_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "pMatch",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "pMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "=",
                      "expr": "(\"=\")",
                      "kind": "=",
                      "grammar": "=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "make(fuzzy.Ranks, 0)",
                      "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "make(fuzzy.Ranks, 0)",
                          "expr": "(call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "make",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(fuzzy.Ranks, 0)",
                              "expr": "(argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "fuzzy.Ranks",
                                  "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                  "kind": "qualified_type",
                                  "grammar": "qualified_type",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "fuzzy",
                                      "expr": "(package_identifier)",
                                      "kind": "package_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": ".",
                                      "expr": "(\".\")",
                                      "kind": ".",
                                      "grammar": ".",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "Ranks",
                                      "expr": "(type_identifier)",
                                      "kind": "type_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "0",
                                  "expr": "(int_literal)",
                                  "kind": "int_literal",
                                  "grammar": "int_literal",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "keys := lo.KeyBy(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                  "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))))))))",
                  "kind": "short_var_declaration",
                  "grammar": "short_var_declaration",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "keys",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "keys",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": ":=",
                      "expr": "(\":=\")",
                      "kind": ":=",
                      "grammar": ":=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "lo.KeyBy(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "lo.KeyBy(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))))))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "lo.KeyBy",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "lo",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "KeyBy",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(posMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                              "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "posMatch",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "func(item fuzzy.Rank) string {\n            return item.Target\n        }",
                                  "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))))",
                                  "kind": "func_literal",
                                  "grammar": "func_literal",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "func",
                                      "expr": "(\"func\")",
                                      "kind": "func",
                                      "grammar": "func",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(item fuzzy.Rank)",
                                      "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))))",
                                      "kind": "parameter_list",
                                      "grammar": "parameter_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "item fuzzy.Rank",
                                          "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                          "kind": "parameter_declaration",
                                          "grammar": "parameter_declaration",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "item",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "fuzzy.Rank",
                                              "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                              "kind": "qualified_type",
                                              "grammar": "qualified_type",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "fuzzy",
                                                  "expr": "(package_identifier)",
                                                  "kind": "package_identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ".",
                                                  "expr": "(\".\")",
                                                  "kind": ".",
                                                  "grammar": ".",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "Rank",
                                                  "expr": "(type_identifier)",
                                                  "kind": "type_identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "string",
                                      "expr": "(type_identifier)",
                                      "kind": "type_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "{\n            return item.Target\n        }",
                                      "expr": "(block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))",
                                      "kind": "block",
                                      "grammar": "block",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "{",
                                          "expr": "(\"{\")",
                                          "kind": "{",
                                          "grammar": "{",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "return item.Target",
                                          "expr": "(return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))",
                                          "kind": "return_statement",
                                          "grammar": "return_statement",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "return",
                                              "expr": "(\"return\")",
                                              "kind": "return",
                                              "grammar": "return",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "item.Target",
                                              "expr": "(expression_list (selector_expression operand: (identifier) field: (field_identifier)))",
                                              "kind": "expression_list",
                                              "grammar": "expression_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "item.Target",
                                                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                  "kind": "selector_expression",
                                                  "grammar": "selector_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "item",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": ".",
                                                      "expr": "(\".\")",
                                                      "kind": ".",
                                                      "grammar": ".",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "Target",
                                                      "expr": "(field_identifier)",
                                                      "kind": "field_identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "\n",
                                          "expr": "(\"\n\")",
                                          "kind": "\n",
                                          "grammar": "\n",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "}",
                                          "expr": "(\"}\")",
                                          "kind": "}",
                                          "grammar": "}",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "for keyRef := range keys {\n            items := lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            pMatch = append(pMatch, item)\n        }",
                  "expr": "(for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))))))",
                  "kind": "for_statement",
                  "grammar": "for_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "for",
                      "expr": "(\"for\")",
                      "kind": "for",
                      "grammar": "for",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "keyRef := range keys",
                      "expr": "(range_clause left: (expression_list (identifier)) right: (identifier))",
                      "kind": "range_clause",
                      "grammar": "range_clause",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "keyRef",
                          "expr": "(expression_list (identifier))",
                          "kind": "expression_list",
                          "grammar": "expression_list",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "keyRef",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ":=",
                          "expr": "(\":=\")",
                          "kind": ":=",
                          "grammar": ":=",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "range",
                          "expr": "(\"range\")",
                          "kind": "range",
                          "grammar": "range",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "keys",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{\n            items := lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            pMatch = append(pMatch, item)\n        }",
                      "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))",
                      "kind": "block",
                      "grammar": "block",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "items := lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))))))))",
                          "kind": "short_var_declaration",
                          "grammar": "short_var_declaration",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "items",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "items",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": ":=",
                              "expr": "(\":=\")",
                              "kind": ":=",
                              "grammar": ":=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "lo.Filter(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))))))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "lo.Filter",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "lo",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Filter",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(posMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                                      "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "posMatch",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            }",
                                          "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))))",
                                          "kind": "func_literal",
                                          "grammar": "func_literal",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "func",
                                              "expr": "(\"func\")",
                                              "kind": "func",
                                              "grammar": "func",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "(item fuzzy.Rank, _ int)",
                                              "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier)))",
                                              "kind": "parameter_list",
                                              "grammar": "parameter_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "(",
                                                  "expr": "(\"(\")",
                                                  "kind": "(",
                                                  "grammar": "(",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "item fuzzy.Rank",
                                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "item",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "fuzzy.Rank",
                                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                                      "kind": "qualified_type",
                                                      "grammar": "qualified_type",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "fuzzy",
                                                          "expr": "(package_identifier)",
                                                          "kind": "package_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "Rank",
                                                          "expr": "(type_identifier)",
                                                          "kind": "type_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "_ int",
                                                  "expr": "(parameter_declaration name: (identifier) type: (type_identifier))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "_",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "int",
                                                      "expr": "(type_identifier)",
                                                      "kind": "type_identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ")",
                                                  "expr": "(\")\")",
                                                  "kind": ")",
                                                  "grammar": ")",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "bool",
                                              "expr": "(type_identifier)",
                                              "kind": "type_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "{\n                return item.Target == keyRef\n            }",
                                              "expr": "(block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))",
                                              "kind": "block",
                                              "grammar": "block",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "{",
                                                  "expr": "(\"{\")",
                                                  "kind": "{",
                                                  "grammar": "{",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "return item.Target == keyRef",
                                                  "expr": "(return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))",
                                                  "kind": "return_statement",
                                                  "grammar": "return_statement",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "return",
                                                      "expr": "(\"return\")",
                                                      "kind": "return",
                                                      "grammar": "return",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "item.Target == keyRef",
                                                      "expr": "(expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))",
                                                      "kind": "expression_list",
                                                      "grammar": "expression_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "item.Target == keyRef",
                                                          "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))",
                                                          "kind": "binary_expression",
                                                          "grammar": "binary_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item.Target",
                                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                              "kind": "selector_expression",
                                                              "grammar": "selector_expression",
                                                              "source_language": "Golang",
                                                              "children": [
                                                                {
                                                                  "raw": "item",
                                                                  "expr": "(identifier)",
                                                                  "kind": "identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": ".",
                                                                  "expr": "(\".\")",
                                                                  "kind": ".",
                                                                  "grammar": ".",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": "Target",
                                                                  "expr": "(field_identifier)",
                                                                  "kind": "field_identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                }
                                                              ],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "==",
                                                              "expr": "(\"==\")",
                                                              "kind": "==",
                                                              "grammar": "==",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "keyRef",
                                                              "expr": "(identifier)",
                                                              "kind": "identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "\n",
                                                  "expr": "(\"\n\")",
                                                  "kind": "\n",
                                                  "grammar": "\n",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "}",
                                                  "expr": "(\"}\")",
                                                  "kind": "}",
                                                  "grammar": "}",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))))))))",
                          "kind": "short_var_declaration",
                          "grammar": "short_var_declaration",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "item",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "item",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": ":=",
                              "expr": "(\":=\")",
                              "kind": ":=",
                              "grammar": ":=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))))))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "lo.MinBy",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "lo",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "MinBy",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                                      "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "items",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            }",
                                          "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))))",
                                          "kind": "func_literal",
                                          "grammar": "func_literal",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "func",
                                              "expr": "(\"func\")",
                                              "kind": "func",
                                              "grammar": "func",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "(item fuzzy.Rank, minItem fuzzy.Rank)",
                                              "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))))",
                                              "kind": "parameter_list",
                                              "grammar": "parameter_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "(",
                                                  "expr": "(\"(\")",
                                                  "kind": "(",
                                                  "grammar": "(",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "item fuzzy.Rank",
                                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "item",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "fuzzy.Rank",
                                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                                      "kind": "qualified_type",
                                                      "grammar": "qualified_type",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "fuzzy",
                                                          "expr": "(package_identifier)",
                                                          "kind": "package_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "Rank",
                                                          "expr": "(type_identifier)",
                                                          "kind": "type_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "minItem fuzzy.Rank",
                                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "minItem",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "fuzzy.Rank",
                                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                                      "kind": "qualified_type",
                                                      "grammar": "qualified_type",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "fuzzy",
                                                          "expr": "(package_identifier)",
                                                          "kind": "package_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "Rank",
                                                          "expr": "(type_identifier)",
                                                          "kind": "type_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ")",
                                                  "expr": "(\")\")",
                                                  "kind": ")",
                                                  "grammar": ")",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "bool",
                                              "expr": "(type_identifier)",
                                              "kind": "type_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "{\n                return item.Distance < minItem.Distance\n            }",
                                              "expr": "(block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))",
                                              "kind": "block",
                                              "grammar": "block",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "{",
                                                  "expr": "(\"{\")",
                                                  "kind": "{",
                                                  "grammar": "{",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "return item.Distance < minItem.Distance",
                                                  "expr": "(return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))",
                                                  "kind": "return_statement",
                                                  "grammar": "return_statement",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "return",
                                                      "expr": "(\"return\")",
                                                      "kind": "return",
                                                      "grammar": "return",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "item.Distance < minItem.Distance",
                                                      "expr": "(expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))",
                                                      "kind": "expression_list",
                                                      "grammar": "expression_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "item.Distance < minItem.Distance",
                                                          "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))",
                                                          "kind": "binary_expression",
                                                          "grammar": "binary_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item.Distance",
                                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                              "kind": "selector_expression",
                                                              "grammar": "selector_expression",
                                                              "source_language": "Golang",
                                                              "children": [
                                                                {
                                                                  "raw": "item",
                                                                  "expr": "(identifier)",
                                                                  "kind": "identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": ".",
                                                                  "expr": "(\".\")",
                                                                  "kind": ".",
                                                                  "grammar": ".",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": "Distance",
                                                                  "expr": "(field_identifier)",
                                                                  "kind": "field_identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                }
                                                              ],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "<",
                                                              "expr": "(\"<\")",
                                                              "kind": "<",
                                                              "grammar": "<",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "minItem.Distance",
                                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                              "kind": "selector_expression",
                                                              "grammar": "selector_expression",
                                                              "source_language": "Golang",
                                                              "children": [
                                                                {
                                                                  "raw": "minItem",
                                                                  "expr": "(identifier)",
                                                                  "kind": "identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": ".",
                                                                  "expr": "(\".\")",
                                                                  "kind": ".",
                                                                  "grammar": ".",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": "Distance",
                                                                  "expr": "(field_identifier)",
                                                                  "kind": "field_identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                }
                                                              ],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "\n",
                                                  "expr": "(\"\n\")",
                                                  "kind": "\n",
                                                  "grammar": "\n",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "}",
                                                  "expr": "(\"}\")",
                                                  "kind": "}",
                                                  "grammar": "}",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch = append(pMatch, item)",
                          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))))",
                          "kind": "assignment_statement",
                          "grammar": "assignment_statement",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "pMatch",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "pMatch",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "=",
                              "expr": "(\"=\")",
                              "kind": "=",
                              "grammar": "=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "append(pMatch, item)",
                              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "append(pMatch, item)",
                                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "append",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(pMatch, item)",
                                      "expr": "(argument_list (identifier) (identifier))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "pMatch",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "item",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "nMatch = make(fuzzy.Ranks, 0)",
                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))))",
                  "kind": "assignment_statement",
                  "grammar": "assignment_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "nMatch",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "nMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "=",
                      "expr": "(\"=\")",
                      "kind": "=",
                      "grammar": "=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "make(fuzzy.Ranks, 0)",
                      "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "make(fuzzy.Ranks, 0)",
                          "expr": "(call_expression function: (identifier) arguments: (argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal)))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "make",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(fuzzy.Ranks, 0)",
                              "expr": "(argument_list (qualified_type package: (package_identifier) name: (type_identifier)) (int_literal))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "fuzzy.Ranks",
                                  "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                  "kind": "qualified_type",
                                  "grammar": "qualified_type",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "fuzzy",
                                      "expr": "(package_identifier)",
                                      "kind": "package_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": ".",
                                      "expr": "(\".\")",
                                      "kind": ".",
                                      "grammar": ".",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "Ranks",
                                      "expr": "(type_identifier)",
                                      "kind": "type_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "0",
                                  "expr": "(int_literal)",
                                  "kind": "int_literal",
                                  "grammar": "int_literal",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "keys = lo.KeyBy(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))))))))",
                  "kind": "assignment_statement",
                  "grammar": "assignment_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "keys",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "keys",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "=",
                      "expr": "(\"=\")",
                      "kind": "=",
                      "grammar": "=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "lo.KeyBy(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                      "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "lo.KeyBy(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                          "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))))))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "lo.KeyBy",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "lo",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "KeyBy",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "(negMatch, func(item fuzzy.Rank) string {\n            return item.Target\n        })",
                              "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "negMatch",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "func(item fuzzy.Rank) string {\n            return item.Target\n        }",
                                  "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))))",
                                  "kind": "func_literal",
                                  "grammar": "func_literal",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "func",
                                      "expr": "(\"func\")",
                                      "kind": "func",
                                      "grammar": "func",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(item fuzzy.Rank)",
                                      "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))))",
                                      "kind": "parameter_list",
                                      "grammar": "parameter_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "item fuzzy.Rank",
                                          "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                          "kind": "parameter_declaration",
                                          "grammar": "parameter_declaration",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "item",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "fuzzy.Rank",
                                              "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                              "kind": "qualified_type",
                                              "grammar": "qualified_type",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "fuzzy",
                                                  "expr": "(package_identifier)",
                                                  "kind": "package_identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ".",
                                                  "expr": "(\".\")",
                                                  "kind": ".",
                                                  "grammar": ".",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "Rank",
                                                  "expr": "(type_identifier)",
                                                  "kind": "type_identifier",
                                                  "grammar": "identifier",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "string",
                                      "expr": "(type_identifier)",
                                      "kind": "type_identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "{\n            return item.Target\n        }",
                                      "expr": "(block (return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier)))))",
                                      "kind": "block",
                                      "grammar": "block",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "{",
                                          "expr": "(\"{\")",
                                          "kind": "{",
                                          "grammar": "{",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "return item.Target",
                                          "expr": "(return_statement (expression_list (selector_expression operand: (identifier) field: (field_identifier))))",
                                          "kind": "return_statement",
                                          "grammar": "return_statement",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "return",
                                              "expr": "(\"return\")",
                                              "kind": "return",
                                              "grammar": "return",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "item.Target",
                                              "expr": "(expression_list (selector_expression operand: (identifier) field: (field_identifier)))",
                                              "kind": "expression_list",
                                              "grammar": "expression_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "item.Target",
                                                  "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                  "kind": "selector_expression",
                                                  "grammar": "selector_expression",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "item",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": ".",
                                                      "expr": "(\".\")",
                                                      "kind": ".",
                                                      "grammar": ".",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "Target",
                                                      "expr": "(field_identifier)",
                                                      "kind": "field_identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "\n",
                                          "expr": "(\"\n\")",
                                          "kind": "\n",
                                          "grammar": "\n",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "}",
                                          "expr": "(\"}\")",
                                          "kind": "}",
                                          "grammar": "}",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "for keyRef := range keys {\n            items := lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            nMatch = append(nMatch, item)\n        }",
                  "expr": "(for_statement (range_clause left: (expression_list (identifier)) right: (identifier)) body: (block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))))))",
                  "kind": "for_statement",
                  "grammar": "for_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "for",
                      "expr": "(\"for\")",
                      "kind": "for",
                      "grammar": "for",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "keyRef := range keys",
                      "expr": "(range_clause left: (expression_list (identifier)) right: (identifier))",
                      "kind": "range_clause",
                      "grammar": "range_clause",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "keyRef",
                          "expr": "(expression_list (identifier))",
                          "kind": "expression_list",
                          "grammar": "expression_list",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "keyRef",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ":=",
                          "expr": "(\":=\")",
                          "kind": ":=",
                          "grammar": ":=",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "range",
                          "expr": "(\"range\")",
                          "kind": "range",
                          "grammar": "range",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "keys",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{\n            items := lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })\n            item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })\n            nMatch = append(nMatch, item)\n        }",
                      "expr": "(block (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))))",
                      "kind": "block",
                      "grammar": "block",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "items := lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))))))))",
                          "kind": "short_var_declaration",
                          "grammar": "short_var_declaration",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "items",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "items",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": ":=",
                              "expr": "(\":=\")",
                              "kind": ":=",
                              "grammar": ":=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "lo.Filter(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))))))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "lo.Filter",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "lo",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Filter",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(negMatch, func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            })",
                                      "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "negMatch",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "func(item fuzzy.Rank, _ int) bool {\n                return item.Target == keyRef\n            }",
                                          "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))))",
                                          "kind": "func_literal",
                                          "grammar": "func_literal",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "func",
                                              "expr": "(\"func\")",
                                              "kind": "func",
                                              "grammar": "func",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "(item fuzzy.Rank, _ int)",
                                              "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (type_identifier)))",
                                              "kind": "parameter_list",
                                              "grammar": "parameter_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "(",
                                                  "expr": "(\"(\")",
                                                  "kind": "(",
                                                  "grammar": "(",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "item fuzzy.Rank",
                                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "item",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "fuzzy.Rank",
                                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                                      "kind": "qualified_type",
                                                      "grammar": "qualified_type",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "fuzzy",
                                                          "expr": "(package_identifier)",
                                                          "kind": "package_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "Rank",
                                                          "expr": "(type_identifier)",
                                                          "kind": "type_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "_ int",
                                                  "expr": "(parameter_declaration name: (identifier) type: (type_identifier))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "_",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "int",
                                                      "expr": "(type_identifier)",
                                                      "kind": "type_identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ")",
                                                  "expr": "(\")\")",
                                                  "kind": ")",
                                                  "grammar": ")",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "bool",
                                              "expr": "(type_identifier)",
                                              "kind": "type_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "{\n                return item.Target == keyRef\n            }",
                                              "expr": "(block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))))",
                                              "kind": "block",
                                              "grammar": "block",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "{",
                                                  "expr": "(\"{\")",
                                                  "kind": "{",
                                                  "grammar": "{",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "return item.Target == keyRef",
                                                  "expr": "(return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))))",
                                                  "kind": "return_statement",
                                                  "grammar": "return_statement",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "return",
                                                      "expr": "(\"return\")",
                                                      "kind": "return",
                                                      "grammar": "return",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "item.Target == keyRef",
                                                      "expr": "(expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier)))",
                                                      "kind": "expression_list",
                                                      "grammar": "expression_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "item.Target == keyRef",
                                                          "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (identifier))",
                                                          "kind": "binary_expression",
                                                          "grammar": "binary_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item.Target",
                                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                              "kind": "selector_expression",
                                                              "grammar": "selector_expression",
                                                              "source_language": "Golang",
                                                              "children": [
                                                                {
                                                                  "raw": "item",
                                                                  "expr": "(identifier)",
                                                                  "kind": "identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": ".",
                                                                  "expr": "(\".\")",
                                                                  "kind": ".",
                                                                  "grammar": ".",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": "Target",
                                                                  "expr": "(field_identifier)",
                                                                  "kind": "field_identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                }
                                                              ],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "==",
                                                              "expr": "(\"==\")",
                                                              "kind": "==",
                                                              "grammar": "==",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "keyRef",
                                                              "expr": "(identifier)",
                                                              "kind": "identifier",
                                                              "grammar": "identifier",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "\n",
                                                  "expr": "(\"\n\")",
                                                  "kind": "\n",
                                                  "grammar": "\n",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "}",
                                                  "expr": "(\"}\")",
                                                  "kind": "}",
                                                  "grammar": "}",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "item := lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))))))))",
                          "kind": "short_var_declaration",
                          "grammar": "short_var_declaration",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "item",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "item",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": ":=",
                              "expr": "(\":=\")",
                              "kind": ":=",
                              "grammar": ":=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                              "expr": "(expression_list (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "lo.MinBy(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))))))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "lo.MinBy",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "lo",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "MinBy",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(items, func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            })",
                                      "expr": "(argument_list (identifier) (func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "items",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "func(item fuzzy.Rank, minItem fuzzy.Rank) bool {\n                return item.Distance < minItem.Distance\n            }",
                                          "expr": "(func_literal parameters: (parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))) result: (type_identifier) body: (block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))))",
                                          "kind": "func_literal",
                                          "grammar": "func_literal",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "func",
                                              "expr": "(\"func\")",
                                              "kind": "func",
                                              "grammar": "func",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "(item fuzzy.Rank, minItem fuzzy.Rank)",
                                              "expr": "(parameter_list (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))) (parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier))))",
                                              "kind": "parameter_list",
                                              "grammar": "parameter_list",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "(",
                                                  "expr": "(\"(\")",
                                                  "kind": "(",
                                                  "grammar": "(",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "item fuzzy.Rank",
                                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "item",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "fuzzy.Rank",
                                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                                      "kind": "qualified_type",
                                                      "grammar": "qualified_type",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "fuzzy",
                                                          "expr": "(package_identifier)",
                                                          "kind": "package_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "Rank",
                                                          "expr": "(type_identifier)",
                                                          "kind": "type_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ",",
                                                  "expr": "(\",\")",
                                                  "kind": ",",
                                                  "grammar": ",",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "minItem fuzzy.Rank",
                                                  "expr": "(parameter_declaration name: (identifier) type: (qualified_type package: (package_identifier) name: (type_identifier)))",
                                                  "kind": "parameter_declaration",
                                                  "grammar": "parameter_declaration",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "minItem",
                                                      "expr": "(identifier)",
                                                      "kind": "identifier",
                                                      "grammar": "identifier",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "fuzzy.Rank",
                                                      "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                                                      "kind": "qualified_type",
                                                      "grammar": "qualified_type",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "fuzzy",
                                                          "expr": "(package_identifier)",
                                                          "kind": "package_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": ".",
                                                          "expr": "(\".\")",
                                                          "kind": ".",
                                                          "grammar": ".",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        },
                                                        {
                                                          "raw": "Rank",
                                                          "expr": "(type_identifier)",
                                                          "kind": "type_identifier",
                                                          "grammar": "identifier",
                                                          "source_language": "Golang",
                                                          "children": [],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": ")",
                                                  "expr": "(\")\")",
                                                  "kind": ")",
                                                  "grammar": ")",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "bool",
                                              "expr": "(type_identifier)",
                                              "kind": "type_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "{\n                return item.Distance < minItem.Distance\n            }",
                                              "expr": "(block (return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))))",
                                              "kind": "block",
                                              "grammar": "block",
                                              "source_language": "Golang",
                                              "children": [
                                                {
                                                  "raw": "{",
                                                  "expr": "(\"{\")",
                                                  "kind": "{",
                                                  "grammar": "{",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "return item.Distance < minItem.Distance",
                                                  "expr": "(return_statement (expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))))",
                                                  "kind": "return_statement",
                                                  "grammar": "return_statement",
                                                  "source_language": "Golang",
                                                  "children": [
                                                    {
                                                      "raw": "return",
                                                      "expr": "(\"return\")",
                                                      "kind": "return",
                                                      "grammar": "return",
                                                      "source_language": "Golang",
                                                      "children": [],
                                                      "is_root": false
                                                    },
                                                    {
                                                      "raw": "item.Distance < minItem.Distance",
                                                      "expr": "(expression_list (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier))))",
                                                      "kind": "expression_list",
                                                      "grammar": "expression_list",
                                                      "source_language": "Golang",
                                                      "children": [
                                                        {
                                                          "raw": "item.Distance < minItem.Distance",
                                                          "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (selector_expression operand: (identifier) field: (field_identifier)))",
                                                          "kind": "binary_expression",
                                                          "grammar": "binary_expression",
                                                          "source_language": "Golang",
                                                          "children": [
                                                            {
                                                              "raw": "item.Distance",
                                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                              "kind": "selector_expression",
                                                              "grammar": "selector_expression",
                                                              "source_language": "Golang",
                                                              "children": [
                                                                {
                                                                  "raw": "item",
                                                                  "expr": "(identifier)",
                                                                  "kind": "identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": ".",
                                                                  "expr": "(\".\")",
                                                                  "kind": ".",
                                                                  "grammar": ".",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": "Distance",
                                                                  "expr": "(field_identifier)",
                                                                  "kind": "field_identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                }
                                                              ],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "<",
                                                              "expr": "(\"<\")",
                                                              "kind": "<",
                                                              "grammar": "<",
                                                              "source_language": "Golang",
                                                              "children": [],
                                                              "is_root": false
                                                            },
                                                            {
                                                              "raw": "minItem.Distance",
                                                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                                              "kind": "selector_expression",
                                                              "grammar": "selector_expression",
                                                              "source_language": "Golang",
                                                              "children": [
                                                                {
                                                                  "raw": "minItem",
                                                                  "expr": "(identifier)",
                                                                  "kind": "identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": ".",
                                                                  "expr": "(\".\")",
                                                                  "kind": ".",
                                                                  "grammar": ".",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                },
                                                                {
                                                                  "raw": "Distance",
                                                                  "expr": "(field_identifier)",
                                                                  "kind": "field_identifier",
                                                                  "grammar": "identifier",
                                                                  "source_language": "Golang",
                                                                  "children": [],
                                                                  "is_root": false
                                                                }
                                                              ],
                                                              "is_root": false
                                                            }
                                                          ],
                                                          "is_root": false
                                                        }
                                                      ],
                                                      "is_root": false
                                                    }
                                                  ],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "\n",
                                                  "expr": "(\"\n\")",
                                                  "kind": "\n",
                                                  "grammar": "\n",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                },
                                                {
                                                  "raw": "}",
                                                  "expr": "(\"}\")",
                                                  "kind": "}",
                                                  "grammar": "}",
                                                  "source_language": "Golang",
                                                  "children": [],
                                                  "is_root": false
                                                }
                                              ],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch = append(nMatch, item)",
                          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))))",
                          "kind": "assignment_statement",
                          "grammar": "assignment_statement",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "nMatch",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "nMatch",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "=",
                              "expr": "(\"=\")",
                              "kind": "=",
                              "grammar": "=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "append(nMatch, item)",
                              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier))))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "append(nMatch, item)",
                                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier)))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "append",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(nMatch, item)",
                                      "expr": "(argument_list (identifier) (identifier))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "nMatch",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "item",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, match := range pMatch {\n        if match.Distance == 0 {\n            score += posFullScore\n        } else if match.Distance <= 4 {\n            score += posPartScore\n        }\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, match := range pMatch",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (identifier))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, match",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "match",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "pMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        if match.Distance == 0 {\n            score += posFullScore\n        } else if match.Distance <= 4 {\n            score += posPartScore\n        }\n    }",
              "expr": "(block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "if match.Distance == 0 {\n            score += posFullScore\n        } else if match.Distance <= 4 {\n            score += posPartScore\n        }",
                  "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))))",
                  "kind": "if_statement",
                  "grammar": "if_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "if",
                      "expr": "(\"if\")",
                      "kind": "if",
                      "grammar": "if",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "match.Distance == 0",
                      "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                      "kind": "binary_expression",
                      "grammar": "binary_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "match.Distance",
                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "match",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "Distance",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "==",
                          "expr": "(\"==\")",
                          "kind": "==",
                          "grammar": "==",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "0",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{\n            score += posFullScore\n        }",
                      "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))",
                      "kind": "block",
                      "grammar": "block",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "score += posFullScore",
                          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))",
                          "kind": "assignment_statement",
                          "grammar": "assignment_statement",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "score",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "score",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "+=",
                              "expr": "(\"+=\")",
                              "kind": "+=",
                              "grammar": "+=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "posFullScore",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "posFullScore",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "else",
                      "expr": "(\"else\")",
                      "kind": "else",
                      "grammar": "else",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "if match.Distance <= 4 {\n            score += posPartScore\n        }",
                      "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))",
                      "kind": "if_statement",
                      "grammar": "if_statement",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "if",
                          "expr": "(\"if\")",
                          "kind": "if",
                          "grammar": "if",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "match.Distance <= 4",
                          "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                          "kind": "binary_expression",
                          "grammar": "binary_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "match.Distance",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "match",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "Distance",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "<=",
                              "expr": "(\"<=\")",
                              "kind": "<=",
                              "grammar": "<=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "4",
                              "expr": "(int_literal)",
                              "kind": "int_literal",
                              "grammar": "int_literal",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "{\n            score += posPartScore\n        }",
                          "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))",
                          "kind": "block",
                          "grammar": "block",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "{",
                              "expr": "(\"{\")",
                              "kind": "{",
                              "grammar": "{",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "score += posPartScore",
                              "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))",
                              "kind": "assignment_statement",
                              "grammar": "assignment_statement",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "score",
                                  "expr": "(expression_list (identifier))",
                                  "kind": "expression_list",
                                  "grammar": "expression_list",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "score",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "+=",
                                  "expr": "(\"+=\")",
                                  "kind": "+=",
                                  "grammar": "+=",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "posPartScore",
                                  "expr": "(expression_list (identifier))",
                                  "kind": "expression_list",
                                  "grammar": "expression_list",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "posPartScore",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "\n",
                              "expr": "(\"\n\")",
                              "kind": "\n",
                              "grammar": "\n",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "}",
                              "expr": "(\"}\")",
                              "kind": "}",
                              "grammar": "}",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, match := range nMatch {\n        if match.Distance == 0 {\n            score -= negFullScore\n        } else if match.Distance <= 4 {\n            score -= negPartScore\n        }\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, match := range nMatch",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (identifier))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, match",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "match",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "nMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        if match.Distance == 0 {\n            score -= negFullScore\n        } else if match.Distance <= 4 {\n            score -= negPartScore\n        }\n    }",
              "expr": "(block (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "if match.Distance == 0 {\n            score -= negFullScore\n        } else if match.Distance <= 4 {\n            score -= negPartScore\n        }",
                  "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))) alternative: (if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))))",
                  "kind": "if_statement",
                  "grammar": "if_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "if",
                      "expr": "(\"if\")",
                      "kind": "if",
                      "grammar": "if",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "match.Distance == 0",
                      "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                      "kind": "binary_expression",
                      "grammar": "binary_expression",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "match.Distance",
                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "match",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "Distance",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "==",
                          "expr": "(\"==\")",
                          "kind": "==",
                          "grammar": "==",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "0",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "{\n            score -= negFullScore\n        }",
                      "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))",
                      "kind": "block",
                      "grammar": "block",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "{",
                          "expr": "(\"{\")",
                          "kind": "{",
                          "grammar": "{",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "score -= negFullScore",
                          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))",
                          "kind": "assignment_statement",
                          "grammar": "assignment_statement",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "score",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "score",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "-=",
                              "expr": "(\"-=\")",
                              "kind": "-=",
                              "grammar": "-=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "negFullScore",
                              "expr": "(expression_list (identifier))",
                              "kind": "expression_list",
                              "grammar": "expression_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "negFullScore",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "\n",
                          "expr": "(\"\n\")",
                          "kind": "\n",
                          "grammar": "\n",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "}",
                          "expr": "(\"}\")",
                          "kind": "}",
                          "grammar": "}",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "else",
                      "expr": "(\"else\")",
                      "kind": "else",
                      "grammar": "else",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "if match.Distance <= 4 {\n            score -= negPartScore\n        }",
                      "expr": "(if_statement condition: (binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal)) consequence: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))))",
                      "kind": "if_statement",
                      "grammar": "if_statement",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "if",
                          "expr": "(\"if\")",
                          "kind": "if",
                          "grammar": "if",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "match.Distance <= 4",
                          "expr": "(binary_expression left: (selector_expression operand: (identifier) field: (field_identifier)) right: (int_literal))",
                          "kind": "binary_expression",
                          "grammar": "binary_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "match.Distance",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "match",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "Distance",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "<=",
                              "expr": "(\"<=\")",
                              "kind": "<=",
                              "grammar": "<=",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "4",
                              "expr": "(int_literal)",
                              "kind": "int_literal",
                              "grammar": "int_literal",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": "{\n            score -= negPartScore\n        }",
                          "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier))))",
                          "kind": "block",
                          "grammar": "block",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "{",
                              "expr": "(\"{\")",
                              "kind": "{",
                              "grammar": "{",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "score -= negPartScore",
                              "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (identifier)))",
                              "kind": "assignment_statement",
                              "grammar": "assignment_statement",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "score",
                                  "expr": "(expression_list (identifier))",
                                  "kind": "expression_list",
                                  "grammar": "expression_list",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "score",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": "-=",
                                  "expr": "(\"-=\")",
                                  "kind": "-=",
                                  "grammar": "-=",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "negPartScore",
                                  "expr": "(expression_list (identifier))",
                                  "kind": "expression_list",
                                  "grammar": "expression_list",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "negPartScore",
                                      "expr": "(identifier)",
                                      "kind": "identifier",
                                      "grammar": "identifier",
                                      "source_language": "Golang",
                                      "children": [],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": "\n",
                              "expr": "(\"\n\")",
                              "kind": "\n",
                              "grammar": "\n",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "}",
                              "expr": "(\"}\")",
                              "kind": "}",
                              "grammar": "}",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "return score",
          "expr": "(return_statement (expression_list (identifier)))",
          "kind": "return_statement",
          "grammar": "return_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "return",
              "expr": "(\"return\")",
              "kind": "return",
              "grammar": "return",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "}",
          "expr": "(\"}\")",
          "kind": "}",
          "grammar": "}",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "func",
      "expr": "(\"func\")",
      "kind": "func",
      "grammar": "func",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "CalculateMatchingScores",
      "expr": "(identifier)",
      "kind": "identifier",
      "grammar": "identifier",
      "source_language": "Golang",
      "children": [],
      "is_root": false
    },
    {
      "raw": "(readConfig *config.SearchConfig, postDetail *request.SeekPostDetails)",
      "expr": "(parameter_list (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))) (parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))))",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "readConfig *config.SearchConfig",
          "expr": "(parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier))))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "readConfig",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "*config.SearchConfig",
              "expr": "(pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))",
              "kind": "pointer_type",
              "grammar": "pointer_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "*",
                  "expr": "(\"*\")",
                  "kind": "*",
                  "grammar": "*",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "config.SearchConfig",
                  "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                  "kind": "qualified_type",
                  "grammar": "qualified_type",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "config",
                      "expr": "(package_identifier)",
                      "kind": "package_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ".",
                      "expr": "(\".\")",
                      "kind": ".",
                      "grammar": ".",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "SearchConfig",
                      "expr": "(type_identifier)",
                      "kind": "type_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "postDetail *request.SeekPostDetails",
          "expr": "(parameter_declaration name: (identifier) type: (pointer_type (qualified_type package: (package_identifier) name: (type_identifier))))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "postDetail",
              "expr": "(identifier)",
              "kind": "identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "*request.SeekPostDetails",
              "expr": "(pointer_type (qualified_type package: (package_identifier) name: (type_identifier)))",
              "kind": "pointer_type",
              "grammar": "pointer_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "*",
                  "expr": "(\"*\")",
                  "kind": "*",
                  "grammar": "*",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "request.SeekPostDetails",
                  "expr": "(qualified_type package: (package_identifier) name: (type_identifier))",
                  "kind": "qualified_type",
                  "grammar": "qualified_type",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "request",
                      "expr": "(package_identifier)",
                      "kind": "package_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ".",
                      "expr": "(\".\")",
                      "kind": ".",
                      "grammar": ".",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "SeekPostDetails",
                      "expr": "(type_identifier)",
                      "kind": "type_identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "(int, []string)",
      "expr": "(parameter_list (parameter_declaration type: (type_identifier)) (parameter_declaration type: (slice_type element: (type_identifier))))",
      "kind": "parameter_list",
      "grammar": "parameter_list",
      "source_language": "Golang",
      "children": [
        {
          "raw": "(",
          "expr": "(\"(\")",
          "kind": "(",
          "grammar": "(",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "int",
          "expr": "(parameter_declaration type: (type_identifier))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "int",
              "expr": "(type_identifier)",
              "kind": "type_identifier",
              "grammar": "identifier",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ",",
          "expr": "(\",\")",
          "kind": ",",
          "grammar": ",",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "[]string",
          "expr": "(parameter_declaration type: (slice_type element: (type_identifier)))",
          "kind": "parameter_declaration",
          "grammar": "parameter_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "[]string",
              "expr": "(slice_type element: (type_identifier))",
              "kind": "slice_type",
              "grammar": "slice_type",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "[",
                  "expr": "(\"[\")",
                  "kind": "[",
                  "grammar": "[",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "]",
                  "expr": "(\"]\")",
                  "kind": "]",
                  "grammar": "]",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "string",
                  "expr": "(type_identifier)",
                  "kind": "type_identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": ")",
          "expr": "(\")\")",
          "kind": ")",
          "grammar": ")",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    },
    {
      "raw": "{\n    // positiveMatch := make(fuzzy.Ranks, 0)\n    // negativeMatch := make(fuzzy.Ranks, 0)\n    score := 0\n    // title weighting\n    positiveMatch, negativeMatch := ScorePostMatchingKeyword(readConfig, postDetail.PostTitle)\n    score += scoringMatch(positiveMatch, negativeMatch, 5, 2, 5, 2, false)\n    pMatch, nMatch := ScorePostMatchingKeyword(readConfig, postDetail.WorkType)\n    score += scoringMatch(pMatch, nMatch, 5, 2, 5, 1, false)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.Role)\n    score += scoringMatch(pMatch, nMatch, 5, 2, 5, 2, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.DebugText)\n    score += scoringMatch(pMatch, nMatch, 3, 2, 3, 2, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Description)\n    score += scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Specialties)\n    score += scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)\n    positiveMatch = append(positiveMatch, pMatch...)\n    negativeMatch = append(negativeMatch, nMatch...)\n    debugText := make([]string, 0)\n    for _, match := range positiveMatch {\n        debugText = append(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }\n    for _, match := range negativeMatch {\n        debugText = append(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }\n    return score, debugText\n}",
      "expr": "(block (comment) (comment) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal))) (comment) (short_var_declaration left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))))) (short_var_declaration left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))) (short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (slice_type element: (type_identifier)) (int_literal))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))) (for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))) (return_statement (expression_list (identifier) (identifier))))",
      "kind": "block",
      "grammar": "block",
      "source_language": "Golang",
      "children": [
        {
          "raw": "{",
          "expr": "(\"{\")",
          "kind": "{",
          "grammar": "{",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "// positiveMatch := make(fuzzy.Ranks, 0)",
          "expr": "(comment)",
          "kind": "comment",
          "grammar": "comment",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "// negativeMatch := make(fuzzy.Ranks, 0)",
          "expr": "(comment)",
          "kind": "comment",
          "grammar": "comment",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score := 0",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (int_literal)))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "0",
              "expr": "(expression_list (int_literal))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "0",
                  "expr": "(int_literal)",
                  "kind": "int_literal",
                  "grammar": "int_literal",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "// title weighting",
          "expr": "(comment)",
          "kind": "comment",
          "grammar": "comment",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "positiveMatch, negativeMatch := ScorePostMatchingKeyword(readConfig, postDetail.PostTitle)",
          "expr": "(short_var_declaration left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "positiveMatch, negativeMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "negativeMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "ScorePostMatchingKeyword(readConfig, postDetail.PostTitle)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "ScorePostMatchingKeyword(readConfig, postDetail.PostTitle)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "ScorePostMatchingKeyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(readConfig, postDetail.PostTitle)",
                      "expr": "(argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "readConfig",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "postDetail.PostTitle",
                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "postDetail",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "PostTitle",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score += scoringMatch(positiveMatch, negativeMatch, 5, 2, 5, 2, false)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false)))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "+=",
              "expr": "(\"+=\")",
              "kind": "+=",
              "grammar": "+=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "scoringMatch(positiveMatch, negativeMatch, 5, 2, 5, 2, false)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "scoringMatch(positiveMatch, negativeMatch, 5, 2, 5, 2, false)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "scoringMatch",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(positiveMatch, negativeMatch, 5, 2, 5, 2, false)",
                      "expr": "(argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "positiveMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "negativeMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "5",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "5",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "false",
                          "expr": "(false)",
                          "kind": "false",
                          "grammar": "false",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "pMatch, nMatch := ScorePostMatchingKeyword(readConfig, postDetail.WorkType)",
          "expr": "(short_var_declaration left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "pMatch, nMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "pMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "nMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "ScorePostMatchingKeyword(readConfig, postDetail.WorkType)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "ScorePostMatchingKeyword(readConfig, postDetail.WorkType)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "ScorePostMatchingKeyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(readConfig, postDetail.WorkType)",
                      "expr": "(argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "readConfig",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "postDetail.WorkType",
                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "postDetail",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "WorkType",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score += scoringMatch(pMatch, nMatch, 5, 2, 5, 1, false)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false)))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "+=",
              "expr": "(\"+=\")",
              "kind": "+=",
              "grammar": "+=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "scoringMatch(pMatch, nMatch, 5, 2, 5, 1, false)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "scoringMatch(pMatch, nMatch, 5, 2, 5, 1, false)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "scoringMatch",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(pMatch, nMatch, 5, 2, 5, 1, false)",
                      "expr": "(argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (false))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "5",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "5",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "1",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "false",
                          "expr": "(false)",
                          "kind": "false",
                          "grammar": "false",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "positiveMatch = append(positiveMatch, pMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "positiveMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(positiveMatch, pMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(positiveMatch, pMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(positiveMatch, pMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "positiveMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "pMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "negativeMatch = append(negativeMatch, nMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "negativeMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negativeMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(negativeMatch, nMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(negativeMatch, nMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(negativeMatch, nMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "negativeMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "nMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.Role)",
          "expr": "(assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "pMatch, nMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "pMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "nMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "ScorePostMatchingKeyword(readConfig, postDetail.Role)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "ScorePostMatchingKeyword(readConfig, postDetail.Role)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "ScorePostMatchingKeyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(readConfig, postDetail.Role)",
                      "expr": "(argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "readConfig",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "postDetail.Role",
                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "postDetail",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "Role",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score += scoringMatch(pMatch, nMatch, 5, 2, 5, 2, true)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "+=",
              "expr": "(\"+=\")",
              "kind": "+=",
              "grammar": "+=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "scoringMatch(pMatch, nMatch, 5, 2, 5, 2, true)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "scoringMatch(pMatch, nMatch, 5, 2, 5, 2, true)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "scoringMatch",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(pMatch, nMatch, 5, 2, 5, 2, true)",
                      "expr": "(argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "5",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "5",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "true",
                          "expr": "(true)",
                          "kind": "true",
                          "grammar": "true",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "positiveMatch = append(positiveMatch, pMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "positiveMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(positiveMatch, pMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(positiveMatch, pMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(positiveMatch, pMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "positiveMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "pMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "negativeMatch = append(negativeMatch, nMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "negativeMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negativeMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(negativeMatch, nMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(negativeMatch, nMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(negativeMatch, nMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "negativeMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "nMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.DebugText)",
          "expr": "(assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "pMatch, nMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "pMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "nMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "ScorePostMatchingKeyword(readConfig, postDetail.DebugText)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "ScorePostMatchingKeyword(readConfig, postDetail.DebugText)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "ScorePostMatchingKeyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(readConfig, postDetail.DebugText)",
                      "expr": "(argument_list (identifier) (selector_expression operand: (identifier) field: (field_identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "readConfig",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "postDetail.DebugText",
                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "postDetail",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "DebugText",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score += scoringMatch(pMatch, nMatch, 3, 2, 3, 2, true)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "+=",
              "expr": "(\"+=\")",
              "kind": "+=",
              "grammar": "+=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "scoringMatch(pMatch, nMatch, 3, 2, 3, 2, true)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "scoringMatch(pMatch, nMatch, 3, 2, 3, 2, true)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "scoringMatch",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(pMatch, nMatch, 3, 2, 3, 2, true)",
                      "expr": "(argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "3",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "3",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "true",
                          "expr": "(true)",
                          "kind": "true",
                          "grammar": "true",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "positiveMatch = append(positiveMatch, pMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "positiveMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(positiveMatch, pMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(positiveMatch, pMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(positiveMatch, pMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "positiveMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "pMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "negativeMatch = append(negativeMatch, nMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "negativeMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negativeMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(negativeMatch, nMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(negativeMatch, nMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(negativeMatch, nMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "negativeMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "nMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Description)",
          "expr": "(assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "pMatch, nMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "pMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "nMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Description)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Description)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "ScorePostMatchingKeyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(readConfig, postDetail.CompanyDetails.Description)",
                      "expr": "(argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "readConfig",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "postDetail.CompanyDetails.Description",
                          "expr": "(selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "postDetail.CompanyDetails",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "postDetail",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "CompanyDetails",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "Description",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score += scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "+=",
              "expr": "(\"+=\")",
              "kind": "+=",
              "grammar": "+=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "scoringMatch",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(pMatch, nMatch, 2, 1, 2, 1, true)",
                      "expr": "(argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "1",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "1",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "true",
                          "expr": "(true)",
                          "kind": "true",
                          "grammar": "true",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "positiveMatch = append(positiveMatch, pMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "positiveMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(positiveMatch, pMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(positiveMatch, pMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(positiveMatch, pMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "positiveMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "pMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "negativeMatch = append(negativeMatch, nMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "negativeMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negativeMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(negativeMatch, nMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(negativeMatch, nMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(negativeMatch, nMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "negativeMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "nMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "pMatch, nMatch = ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Specialties)",
          "expr": "(assignment_statement left: (expression_list (identifier) (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "pMatch, nMatch",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "pMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "nMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Specialties)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "ScorePostMatchingKeyword(readConfig, postDetail.CompanyDetails.Specialties)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "ScorePostMatchingKeyword",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(readConfig, postDetail.CompanyDetails.Specialties)",
                      "expr": "(argument_list (identifier) (selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "readConfig",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "postDetail.CompanyDetails.Specialties",
                          "expr": "(selector_expression operand: (selector_expression operand: (identifier) field: (field_identifier)) field: (field_identifier))",
                          "kind": "selector_expression",
                          "grammar": "selector_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "postDetail.CompanyDetails",
                              "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                              "kind": "selector_expression",
                              "grammar": "selector_expression",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "postDetail",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ".",
                                  "expr": "(\".\")",
                                  "kind": ".",
                                  "grammar": ".",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "CompanyDetails",
                                  "expr": "(field_identifier)",
                                  "kind": "field_identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            },
                            {
                              "raw": ".",
                              "expr": "(\".\")",
                              "kind": ".",
                              "grammar": ".",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "Specialties",
                              "expr": "(field_identifier)",
                              "kind": "field_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "score += scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "score",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "+=",
              "expr": "(\"+=\")",
              "kind": "+=",
              "grammar": "+=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "scoringMatch(pMatch, nMatch, 2, 1, 2, 1, true)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "scoringMatch",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(pMatch, nMatch, 2, 1, 2, 1, true)",
                      "expr": "(argument_list (identifier) (identifier) (int_literal) (int_literal) (int_literal) (int_literal) (true))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "1",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "2",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "1",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "true",
                          "expr": "(true)",
                          "kind": "true",
                          "grammar": "true",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "positiveMatch = append(positiveMatch, pMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "positiveMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(positiveMatch, pMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(positiveMatch, pMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(positiveMatch, pMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "positiveMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "pMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "pMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "negativeMatch = append(negativeMatch, nMatch...)",
          "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))))",
          "kind": "assignment_statement",
          "grammar": "assignment_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "negativeMatch",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "negativeMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "=",
              "expr": "(\"=\")",
              "kind": "=",
              "grammar": "=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "append(negativeMatch, nMatch...)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier)))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "append(negativeMatch, nMatch...)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (variadic_argument (identifier))))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "append",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "(negativeMatch, nMatch...)",
                      "expr": "(argument_list (identifier) (variadic_argument (identifier)))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "negativeMatch",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "nMatch...",
                          "expr": "(variadic_argument (identifier))",
                          "kind": "variadic_argument",
                          "grammar": "variadic_argument",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "nMatch",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "...",
                              "expr": "(\"...\")",
                              "kind": "...",
                              "grammar": "...",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "debugText := make([]string, 0)",
          "expr": "(short_var_declaration left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (slice_type element: (type_identifier)) (int_literal)))))",
          "kind": "short_var_declaration",
          "grammar": "short_var_declaration",
          "source_language": "Golang",
          "children": [
            {
              "raw": "debugText",
              "expr": "(expression_list (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "debugText",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": ":=",
              "expr": "(\":=\")",
              "kind": ":=",
              "grammar": ":=",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "make([]string, 0)",
              "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (slice_type element: (type_identifier)) (int_literal))))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "make([]string, 0)",
                  "expr": "(call_expression function: (identifier) arguments: (argument_list (slice_type element: (type_identifier)) (int_literal)))",
                  "kind": "call_expression",
                  "grammar": "call_expression",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "make",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "([]string, 0)",
                      "expr": "(argument_list (slice_type element: (type_identifier)) (int_literal))",
                      "kind": "argument_list",
                      "grammar": "argument_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "(",
                          "expr": "(\"(\")",
                          "kind": "(",
                          "grammar": "(",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "[]string",
                          "expr": "(slice_type element: (type_identifier))",
                          "kind": "slice_type",
                          "grammar": "slice_type",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "[",
                              "expr": "(\"[\")",
                              "kind": "[",
                              "grammar": "[",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "]",
                              "expr": "(\"]\")",
                              "kind": "]",
                              "grammar": "]",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "string",
                              "expr": "(type_identifier)",
                              "kind": "type_identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        },
                        {
                          "raw": ",",
                          "expr": "(\",\")",
                          "kind": ",",
                          "grammar": ",",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": "0",
                          "expr": "(int_literal)",
                          "kind": "int_literal",
                          "grammar": "int_literal",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        },
                        {
                          "raw": ")",
                          "expr": "(\")\")",
                          "kind": ")",
                          "grammar": ")",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, match := range positiveMatch {\n        debugText = append(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, match := range positiveMatch",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (identifier))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, match",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "match",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "positiveMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        debugText = append(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }",
              "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "debugText = append(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))))",
                  "kind": "assignment_statement",
                  "grammar": "assignment_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "debugText",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "debugText",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "=",
                      "expr": "(\"=\")",
                      "kind": "=",
                      "grammar": "=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "append(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                      "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "append(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                          "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "append",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(debugText, fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                              "expr": "(argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "debugText",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "fmt.Sprintf(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance)",
                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "fmt.Sprintf",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "fmt",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Sprintf",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(\"[pos;%s:%s:%d]\", match.Target, match.Source, match.Distance)",
                                      "expr": "(argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "\"[pos;%s:%s:%d]\"",
                                          "expr": "(interpreted_string_literal)",
                                          "kind": "interpreted_string_literal",
                                          "grammar": "interpreted_string_literal",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "\"",
                                              "expr": "(\"\"\")",
                                              "kind": "\"",
                                              "grammar": "\"",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "\"",
                                              "expr": "(\"\"\")",
                                              "kind": "\"",
                                              "grammar": "\"",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "match.Target",
                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                          "kind": "selector_expression",
                                          "grammar": "selector_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "match",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": ".",
                                              "expr": "(\".\")",
                                              "kind": ".",
                                              "grammar": ".",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "Target",
                                              "expr": "(field_identifier)",
                                              "kind": "field_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "match.Source",
                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                          "kind": "selector_expression",
                                          "grammar": "selector_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "match",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": ".",
                                              "expr": "(\".\")",
                                              "kind": ".",
                                              "grammar": ".",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "Source",
                                              "expr": "(field_identifier)",
                                              "kind": "field_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "match.Distance",
                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                          "kind": "selector_expression",
                                          "grammar": "selector_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "match",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": ".",
                                              "expr": "(\".\")",
                                              "kind": ".",
                                              "grammar": ".",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "Distance",
                                              "expr": "(field_identifier)",
                                              "kind": "field_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "for _, match := range negativeMatch {\n        debugText = append(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }",
          "expr": "(for_statement (range_clause left: (expression_list (identifier) (identifier)) right: (identifier)) body: (block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))))))",
          "kind": "for_statement",
          "grammar": "for_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "for",
              "expr": "(\"for\")",
              "kind": "for",
              "grammar": "for",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "_, match := range negativeMatch",
              "expr": "(range_clause left: (expression_list (identifier) (identifier)) right: (identifier))",
              "kind": "range_clause",
              "grammar": "range_clause",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "_, match",
                  "expr": "(expression_list (identifier) (identifier))",
                  "kind": "expression_list",
                  "grammar": "expression_list",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "_",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": ",",
                      "expr": "(\",\")",
                      "kind": ",",
                      "grammar": ",",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "match",
                      "expr": "(identifier)",
                      "kind": "identifier",
                      "grammar": "identifier",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": ":=",
                  "expr": "(\":=\")",
                  "kind": ":=",
                  "grammar": ":=",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "range",
                  "expr": "(\"range\")",
                  "kind": "range",
                  "grammar": "range",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "negativeMatch",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            },
            {
              "raw": "{\n        debugText = append(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))\n    }",
              "expr": "(block (assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))))",
              "kind": "block",
              "grammar": "block",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "{",
                  "expr": "(\"{\")",
                  "kind": "{",
                  "grammar": "{",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "debugText = append(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                  "expr": "(assignment_statement left: (expression_list (identifier)) right: (expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))))",
                  "kind": "assignment_statement",
                  "grammar": "assignment_statement",
                  "source_language": "Golang",
                  "children": [
                    {
                      "raw": "debugText",
                      "expr": "(expression_list (identifier))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "debugText",
                          "expr": "(identifier)",
                          "kind": "identifier",
                          "grammar": "identifier",
                          "source_language": "Golang",
                          "children": [],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    },
                    {
                      "raw": "=",
                      "expr": "(\"=\")",
                      "kind": "=",
                      "grammar": "=",
                      "source_language": "Golang",
                      "children": [],
                      "is_root": false
                    },
                    {
                      "raw": "append(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                      "expr": "(expression_list (call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))))",
                      "kind": "expression_list",
                      "grammar": "expression_list",
                      "source_language": "Golang",
                      "children": [
                        {
                          "raw": "append(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                          "expr": "(call_expression function: (identifier) arguments: (argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))))",
                          "kind": "call_expression",
                          "grammar": "call_expression",
                          "source_language": "Golang",
                          "children": [
                            {
                              "raw": "append",
                              "expr": "(identifier)",
                              "kind": "identifier",
                              "grammar": "identifier",
                              "source_language": "Golang",
                              "children": [],
                              "is_root": false
                            },
                            {
                              "raw": "(debugText, fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance))",
                              "expr": "(argument_list (identifier) (call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))))",
                              "kind": "argument_list",
                              "grammar": "argument_list",
                              "source_language": "Golang",
                              "children": [
                                {
                                  "raw": "(",
                                  "expr": "(\"(\")",
                                  "kind": "(",
                                  "grammar": "(",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "debugText",
                                  "expr": "(identifier)",
                                  "kind": "identifier",
                                  "grammar": "identifier",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": ",",
                                  "expr": "(\",\")",
                                  "kind": ",",
                                  "grammar": ",",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                },
                                {
                                  "raw": "fmt.Sprintf(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance)",
                                  "expr": "(call_expression function: (selector_expression operand: (identifier) field: (field_identifier)) arguments: (argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier))))",
                                  "kind": "call_expression",
                                  "grammar": "call_expression",
                                  "source_language": "Golang",
                                  "children": [
                                    {
                                      "raw": "fmt.Sprintf",
                                      "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                      "kind": "selector_expression",
                                      "grammar": "selector_expression",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "fmt",
                                          "expr": "(identifier)",
                                          "kind": "identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ".",
                                          "expr": "(\".\")",
                                          "kind": ".",
                                          "grammar": ".",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "Sprintf",
                                          "expr": "(field_identifier)",
                                          "kind": "field_identifier",
                                          "grammar": "identifier",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    },
                                    {
                                      "raw": "(\"[neg;%s:%s:%d]\", match.Target, match.Source, match.Distance)",
                                      "expr": "(argument_list (interpreted_string_literal) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)) (selector_expression operand: (identifier) field: (field_identifier)))",
                                      "kind": "argument_list",
                                      "grammar": "argument_list",
                                      "source_language": "Golang",
                                      "children": [
                                        {
                                          "raw": "(",
                                          "expr": "(\"(\")",
                                          "kind": "(",
                                          "grammar": "(",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "\"[neg;%s:%s:%d]\"",
                                          "expr": "(interpreted_string_literal)",
                                          "kind": "interpreted_string_literal",
                                          "grammar": "interpreted_string_literal",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "\"",
                                              "expr": "(\"\"\")",
                                              "kind": "\"",
                                              "grammar": "\"",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "\"",
                                              "expr": "(\"\"\")",
                                              "kind": "\"",
                                              "grammar": "\"",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "match.Target",
                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                          "kind": "selector_expression",
                                          "grammar": "selector_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "match",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": ".",
                                              "expr": "(\".\")",
                                              "kind": ".",
                                              "grammar": ".",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "Target",
                                              "expr": "(field_identifier)",
                                              "kind": "field_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "match.Source",
                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                          "kind": "selector_expression",
                                          "grammar": "selector_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "match",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": ".",
                                              "expr": "(\".\")",
                                              "kind": ".",
                                              "grammar": ".",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "Source",
                                              "expr": "(field_identifier)",
                                              "kind": "field_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ",",
                                          "expr": "(\",\")",
                                          "kind": ",",
                                          "grammar": ",",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        },
                                        {
                                          "raw": "match.Distance",
                                          "expr": "(selector_expression operand: (identifier) field: (field_identifier))",
                                          "kind": "selector_expression",
                                          "grammar": "selector_expression",
                                          "source_language": "Golang",
                                          "children": [
                                            {
                                              "raw": "match",
                                              "expr": "(identifier)",
                                              "kind": "identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": ".",
                                              "expr": "(\".\")",
                                              "kind": ".",
                                              "grammar": ".",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            },
                                            {
                                              "raw": "Distance",
                                              "expr": "(field_identifier)",
                                              "kind": "field_identifier",
                                              "grammar": "identifier",
                                              "source_language": "Golang",
                                              "children": [],
                                              "is_root": false
                                            }
                                          ],
                                          "is_root": false
                                        },
                                        {
                                          "raw": ")",
                                          "expr": "(\")\")",
                                          "kind": ")",
                                          "grammar": ")",
                                          "source_language": "Golang",
                                          "children": [],
                                          "is_root": false
                                        }
                                      ],
                                      "is_root": false
                                    }
                                  ],
                                  "is_root": false
                                },
                                {
                                  "raw": ")",
                                  "expr": "(\")\")",
                                  "kind": ")",
                                  "grammar": ")",
                                  "source_language": "Golang",
                                  "children": [],
                                  "is_root": false
                                }
                              ],
                              "is_root": false
                            }
                          ],
                          "is_root": false
                        }
                      ],
                      "is_root": false
                    }
                  ],
                  "is_root": false
                },
                {
                  "raw": "\n",
                  "expr": "(\"\n\")",
                  "kind": "\n",
                  "grammar": "\n",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "}",
                  "expr": "(\"}\")",
                  "kind": "}",
                  "grammar": "}",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "return score, debugText",
          "expr": "(return_statement (expression_list (identifier) (identifier)))",
          "kind": "return_statement",
          "grammar": "return_statement",
          "source_language": "Golang",
          "children": [
            {
              "raw": "return",
              "expr": "(\"return\")",
              "kind": "return",
              "grammar": "return",
              "source_language": "Golang",
              "children": [],
              "is_root": false
            },
            {
              "raw": "score, debugText",
              "expr": "(expression_list (identifier) (identifier))",
              "kind": "expression_list",
              "grammar": "expression_list",
              "source_language": "Golang",
              "children": [
                {
                  "raw": "score",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": ",",
                  "expr": "(\",\")",
                  "kind": ",",
                  "grammar": ",",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                },
                {
                  "raw": "debugText",
                  "expr": "(identifier)",
                  "kind": "identifier",
                  "grammar": "identifier",
                  "source_language": "Golang",
                  "children": [],
                  "is_root": false
                }
              ],
              "is_root": false
            }
          ],
          "is_root": false
        },
        {
          "raw": "\n",
          "expr": "(\"\n\")",
          "kind": "\n",
          "grammar": "\n",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        },
        {
          "raw": "}",
          "expr": "(\"}\")",
          "kind": "}",
          "grammar": "}",
          "source_language": "Golang",
          "children": [],
          "is_root": false
        }
      ],
      "is_root": false
    }
  ],
  "is_root": true
}