/// basic
///

attr_set = @{
    (func_block | (naming ~ "=" ~ value_block | func_block)) ~ ","?
}
// attr_def_block = {
// "#[" ~ (naming ~ ("(" ~ (attr_set)* ~ ")")?) ~ "]"
// }
attr_def_block = {
    "#[" ~ attr_set+ ~ "]"
}

naming = {
    (ASCII_ALPHANUMERIC | "_")*
}

// content_or_object_block = { "{" ~ (content) ~ "}" }
array_block  =  { "[" ~ (value_block ~ (",")?)* ~ "]" }
string_block =  { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
int_block    = @{ ("-")? ~ (ASCII_DIGIT)+ }
float_block  = @{ int_block ~ ("." ~ (ASCII_DIGIT)+)? }
num_block    = @{ float_block ~ (^"e" ~ int_block)? }
value_block  = _{ array_block | string_block | num_block }
func_block   =  {
    naming ~ func_arg_block
}

func_arg_block = {
    "(" ~ ((func_name_arg_block | value_block | object_property) ~ ","?)* ~ ")"
}

func_name_arg_block = {
    naming ~ "=" ~ (value_block | object_property)
}

func_block_arr =  {
    "[" ~ (func_block ~ (",")?)* ~ "]"
}
shape_block    =  {
    "(" ~ (ASCII_NONZERO_DIGIT ~ (",")?)+ ~ ")"
}
content        = _{ layer_def_block | attr_def_block | COMMENT | WHITESPACE }

WHITESPACE = _{ " " | "\t" | "\u{000C}" | NEWLINE }
// Comments
COMMENT       = _{ LINE_COMMENT | BLOCK_COMMENT }
LINE_COMMENT  = _{ "//" ~ (!NEWLINE ~ ANY)* }
BLOCK_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// 
int_def_block = {
    "int" ~ naming ~ ("=" ~ int_block){,1}
}

float_def_block = {
    "float" ~ naming ~ ("=" ~ float_block){,1}
}

string_def_block = {
    "string" ~ naming ~ ("=" ~ string_block){,1}
}

array_def_block = {
    "array" ~ naming ~ ("=" ~ array_block){,1}
}

tensor_value = {
    num_block
  | tensor_arr_block
}

tensor_arr_block = {
    "[" ~ (tensor_value ~ (",")?)* ~ "]"
}

tensor_def_block = {
    "tensor" ~ "<" ~ shape_block ~ ">" ~ naming
}

func_def_block = {
    "func" ~ naming ~ ("=" ~ naming)?
}

// variable definition, as the alias of the value
var_def_block = _{
    int_def_block
  | float_def_block
  | string_def_block
  | array_def_block
  | func_def_block
  | tensor_def_block
}

declare_const_reference = @{ "$" }
property_reference      = @{ "&" }

object_property = {
    (declare_const_reference | property_reference) ~ naming ~ ("." ~ naming)*
}

should_value = {
    value_block
  | object_property
}

assignment_block = {
    (object_property | naming) ~ "=" ~ (should_value)
}

// overall layer definition
layer_def_block = {
    "layer" ~ (naming) ~ "{" ~ (layer_property_block){,1}
  | (layer_pass_block | layer_stack_block){,1} ~ "}"
}

layer_property_block = {
    // for layer property and setting
    ("property") ~ "{" ~ (layer_property_elem)* ~ "}"
}

// layer_property_elem_type = @{ "in" | "out" | "static" }
layer_property_elem = {
    // input data reference
    ("in" | "out" | "static") ~ var_def_block
}

// // layer_property_elem_dim_type = @{ "in_dim" | "out_dim" }
// layer_property_elem_dim = {
// ("in_dim" | "out_dim") ~ int_block
// }

layer_stack_block = {
    ("stack") ~ "[" ~ (layer_stack_elem ~ ","?)* ~ "]"
}

layer_stack_elem = _{ func_block | branch_block }

branch_block = {
    "#BRANCH" ~ "{" ~ ("[" ~ (layer_stack_elem ~ ","?) ~ "]")+ ~ "}"
}

layer_pass_block = {
    // for layer pass / calculation
    "pass" ~ "{" ~ (c_impl_block)+ ~ "}"
}

c_impl_block = {
    c_impl_attr_block ~ &"{" ~ c_impl_content_block ~ "}#"
}

c_impl_attr_block = _{ attr_def_block }

c_impl_content_block = ${
    (!"}#" ~ ANY)*
}
// c_imp_content        = _{ ASCII_ALPHANUMERIC }

chunk = _{ SOI ~ content* ~ EOI }
